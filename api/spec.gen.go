// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
