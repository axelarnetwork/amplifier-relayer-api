// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xde1PjuJb/Ki7fqdqZLUPSDf0Y/gvBMKmGhOuY7pnqYTPCVhI3frWkABk2331L8ku2",
	"JVsxoaH2zl/dxNbR0dHvPHR0JD/qThTEUQhDgvWjRz0GCASQQMT+AnMCEf0PfABB7EP9SHchcG8gnO/R",
	"/+yV/5c90w3dC/Uj/fsKorVu6CEIaNOEmqFjZwkDQMmSdUwfYIK8cKEb+sPeItpLf1ytPHf/6mp0wv++",
	"5wVxhAhtmxKlr+mGHgOy1I/0hUeWq5t9Jwp6iyha+LDHnm82G0O/QRFwHYDJ6KT7kFg/+Yh4koaO4PeV",
	"h6CrHxG0gvw4f0Jwrh/p/+oVwu4lT3HvmKNB2XSWgPbEMwjJEiK4CsRMJA2aui+LmXbie4FHSp286Ysn",
	"LXmTp+bCOVj5RD962zf0wAu9YBXoR2+MrBsvJHABEevnHuBgGIUEAYcMXBdBjMtDAw/QB+jN+wDefsSu",
	"g79/+PjNJ/MVPHj39zJ45+K+8xD7fXceIuh/vHVuD77dE+i4JPzuwG8uuBPLRNRvk4RiQAhElM7/pBx9",
	"BY4L54vlt1s/COPvCJPV3f3D+u/+24PDd+8/fPz1+vHdx81PulGT7iYjzIbKjTrwwnMYLihQ39SaGfog",
	"js07GJILSIALCOML+P5krh99bYZQudnGeNRjFMUQEQ8m4g48QqB7vOaYUaOcNdhcG3q48n1wQ2ctkd7D",
	"XhR4BAYxWSc/bTab62Qco5BAxHBpIxDiOUQWdKB3B13G6pYjOwYYCkYVwG1kVJOu6pAE/WIMFjCxIi1z",
	"iqDjxV46ZCVBGzqGoZtY3XmEAkConVkTqAvI42iFHMjNqmoXrN0wszQtgyDRLQyzCWzrpT71Nm3OrEGh",
	"f185KZbZqQ4qlwcvzCpP13QyU76jm2/QIboMiFMYkv8HIHQhJl4IiBeFqtPIN6mbZEXkdAZ/FcstbQsl",
	"UGSMAWIaK6haF4TWxN0ozibMJiyKAXvsLUYJ/5w/+rn/v1/f7P16/eef7n//8pPIChyXA5smyT5niMUx",
	"YkEcRyGGbCgl3FaCsG0CI35ueDJCSWbPpwSQVeIEQxqmfNUtc2iOPpt0zNOr4dCcTnVDNy1rYnGUOHHR",
	"dnt3AFFhYEqgQjs3QrVepyvHSeBQeWAiFCH9us6nXG5UPj4k0B2UtckFBO4RLxC6B8j6qUGianDqY64a",
	"IIZjNsptuse57JWmOZ0qqssPzEqyppSRVhpfAA4So77J+QAIgbVkNOThN4CXu5BMBZecmPLxi/A5BL7/",
	"Yl4o7/xF3FBqVtum9CJ9bUMNz9qPgKsUEd17ZJmY8xb6jTZfbPEzPsTGuy7VncXvMUDsBanr7aLRCdFp",
	"UyTYhWway0UhgQ9EcZKzt9MFxBCEYUTMB+isCExfeUFlkTCzC+UhwPOxUiQFcNQKaRGrVtKS2jyAb0cE",
	"Bu2O1y7erOoHRyTnysgHwhTDhTGCDiDFMlugKm0yZdKp0ilLb46i4JnXs4ZOXRsmIIhVvd5mm+F+fvuq",
	"EP357Y/E9HYriafjf5s1r/JadfcqwE3Cq1GCTpbjGZXHyuFQl08W5o/G06vT09FwZI7t2dlg2yBf3u0o",
	"xKv53HPoou4M0Ohe/m4R6JfeoWLaoUNzItzqaYf0nY3xvD6HjuvHO5xmyHA8cYvA4dXUnlzkmDBEcLF/",
	"n1nmZ9OyzZMuoCk6Hq4wiQJdyliCEunjFsAVL9oPFryDiLCEWPaWFT1LEPXydp4fWAa6BrutaqldiB3k",
	"xTTu1490JgItzZ9r90sYakBLyWoO40O7gRqivLj7WhJNayy5pEVzjSxh/raHNS+IfQ+6GoloI/oweZNa",
	"ce1+6TlL9iNknXo463f/z1CXwlwghka7WEH+NsCud1VBdv0FzgBGISZo5ZBLFEVzCtp6kmOnS8MODr60",
	"xhOxTC1RnW2SDqbZ/taGLzJ1Wb8snfjvFURrPiUEXNejwAT+Jc+A0G2mPgGEawVNTxfDRvNbpxDSoIFS",
	"RxHGLAZK1Lr7BskTorJyJFZ0KnIJJ5XVPJ2AcpzFa332RAOEAGeZaOzZwDa/DP6Y2b9rIHQ1yxwM7Zk9",
	"mZm/X44s82Q2HZ2NR+Oz2dScTkeTsUanE+9rf4b2EmqpgNbaX9iJYuimEMZ/USNCjUGUmhgvMRq0sebh",
	"8L+IBjCOHA8w++ORpQbCdW5Tfob7i/3ELEHmDbxwof2FIgIInHqLECL8l7YkJMZHvR6XuE32OENI7iN0",
	"m/61twjiPeze7uHI91yPrHs3fnTTOzx4e3j4q/vh5uCgD5330J2/Ax9h/8Ph+/eHh+Dtu4PDj+8d8PFD",
	"z0lRi3sLQOA9WPcGjO6AGr25B9FZ8vM+jvx/nb/pHwzfHO6xf99++CUxcWUYlSWlnAssYbOaDhSGmMxI",
	"yVOvkiyqwHl9X0GVJHwVyEkHItjmDtv1KD4DCuGUFxDHlNbRoz64vOyNxrZpDX8bjMYz2xqMp6emNcsT",
	"3fLNqLZ9WkNKfGqO7a0IF/tuhj4cnJ+3JifZe+PxxJ6Zv5vDK9ucXZjT6eDM3HpdK6XUowvwrRfJdXL2",
	"YPpJOUCusGRNlIdWD+UM/WwwnQ0t82QknY0zgIcIuh7hm1jm6dX4RI6NM4AtOF+FboGEkT0tIWHyyRzP",
	"TszL88kfFzRontoDFirLdt3sKQcK6m9OYOxH6wCGZEoAjVplPaWYU6Ocwo2ndT4af0r5bWfy3AtvGXsC",
	"phIaF6Y9OBnYg5llno2mtmk10mO0ModiwYWHCUQF2XTiZ4PLS2vSoKzptA/iGEV39eYpEtuapzCUNm9Q",
	"CBEFpgvU75nWdGZN7EEDB6k7sphvcvPNmswxjpOtRmYBN4YehVAhbKlAuy1+qYG6rUFhi9reFE6PYqPy",
	"pHRp9PmtwlBkxrFzS+Ve63Zrqz4Lo9nWTIyxlmoAmcorNGzUbYX2agZxO0Il+9fWtMVTd2pejiDoIruy",
	"WmJBjkLmwWa2oLpIoj9eZ6ERS07UAzb6SGn1sV3ivNO2TyXUS1mTBnv8oqSS6vVC4Ht/JxVYeQ1m0q9k",
	"o+4minwIQslO3evcQDF08rCbLc6NTMZ2isAsJcLFUJXoKA1VBW5a4HrF7lQaxTYFpZLoUBx41l2wNOxp",
	"C2PUozx5lNayZjDa1ytqOal8KvMoQDdKP2a+nv+ZenT+74rfFjzKHG3DIzZhXBd1f9n2XESB95rS9iyR",
	"xD0se0D+icDPVR5LvFnlrTafJX899Q/8C1L/0/oSV/pp6LwwanYT3AGPWY4zgI+BD0IHKtaGGK8pIWkI",
	"B1IZfff8JC9CaWLyFAq8bSl19lg3556rWJSYVhsmWZvMM7fkI7mimaS8slvZD6tvTNqLPDPfUV26z+iu",
	"WMZVNfFFZ6eW7zL0yiJpRwUH6hneGDDzoKxziJntbSuTG3d+eIIFQ+LNw9oi8Ydv0XYqsd6+khuloxwE",
	"0Up5ehrFXGGl1oWRiEEmd5YdZvYdONSaiM15kueGJ6kuPsXI8qSupSyIbaqKfWrcdEg3yNtoSMQiNdFn",
	"kNAXsAUxWx+IfIG6SWFL7/AO+lEMhbn0Kg/ialflpe6Otqa71qQqqZySm6kNd+6FbOuuJjVBnSmvValT",
	"2rSLtbTw340gAQFZnXRr4S03Ds4WbXnq45mnrutxKfWzJZ1OknDk66efBHI1ipmRAkOc03op/eKaMKa6",
	"I2T76X5ih2xy1A3DBQjBAiJbIcllV99vgk3GhhBAgoHKZS5gVIqixgTnTsAEtlZGFzpeAPzyXK68kHzU",
	"uePI/fpx5G3A0zATgJNwyolEflIfIFhDdR5Tt+VV8ke7Bq2Dm8jfVlpsNcV6yCnwwmoWVelIXn0xrxSs",
	"pufoMp184lqClLUnZUE0jE/QccDt23fvM6/JHePrP3zt7/0K9ubXj+8PN8JzfBdFtkFqcZ/3xGaabJA5",
	"/Wdyr89Sma3kR/nxiiZUuK33AiX7Ij6eXqvfYVGqnAmT5rOKJaBClXzjuHd2vMqJggCE7o7SOKxArnKw",
	"SV67pwfgIe+v3++LQh7wwDd505cLqryV/HJALfHxIkDdefGh6nHWkgS8KMxOtaobrqRBN00RC353mrL0",
	"fDc/h1jOI7RIT6JJTad0d6qXVPx3EJGiRvqJul2twPiP1DanUgisXphZ0YcSocZEoUTBGove04P+p1fn",
	"uqFveahD3F96tn++orGt+JXSYYzL1Y3v4SWbooHjwJhAt8jRqU03TyNpOyIwyJC0qXaTlbXusI/OlbEE",
	"eQkOH6u1CeJiWL7NdW1kBWOttbHDoXnZUJXWMC3ZCQmFlryk6zVtOL/XQK2qrYGntoIcKVNyCYpLaLzQ",
	"hQ/pzDYsPtVcIt+xxB3mTi/puMpu/RaPfGK3O8hSJ5pJWBf1WBxf4Z9hK6n0llQeqafX8yrIADyMkgZv",
	"+smlatmfLTn3tEORnaxwLN4OQOx3dY4lWti2NZB1I+Lz36sIrQILsoMWeeBadUkhSR/w99d8w1G4b4F7",
	"bv9dDZGfIfLmngMaAjQuDEv6FvFOuSZ2ZD7EtNnUW4ReuJhCjKXbV13vv6GacRfdQrf71U3p+YTLokKh",
	"7UqVDOfsPiY2qITrUorq/aEuvPqvJMy8tVG5M1Eyqhq31wrSftmdulYsSPfs0pZW5vEuI99/deiJI99X",
	"nX1D/15TanUbIzAIgrKGJ6C5Mg/pyLoiUzzYpnntXqUjRUobtvILkiSb6ncKe1ulS5aW0Fssy3dBZWho",
	"ChkqbKZUjJQBGcNPFlh5+A3Cmq9Cd1dnU5PqB+spFRoB8KgV2bpyTZp9k/Ak7qssku7WlbtjqJthzWdF",
	"OnOiyv8XWJAL2PiR941Kc0zilXQTt7u7ezaOnOXWdsLQccJcp62IJE8jg53acd+kBpwd9f1sWqPTP7ID",
	"vSOiOQAhD2LtDvgriLUYYAxdzQvZ0V3uvO5wcH6enub/2ZtrIFz/ot0A55bSp69i7roA4QnYJ92lJZpx",
	"EiGYOi7ZkuA228Rq67C821UFX0FGBL1SYVE93FfMyCZ7n2o45e8YuRZtiaqYotwOdrzdprZLmt3dXRAz",
	"CqPGW92mJMdwMp7a1tXQnl1ak8mp+hUEjLihp6cJFEqD0wbFUfjtytbS5m1H57tG2FXylmlbo8HxuTm7",
	"nMgPHDdGaRy1L4Ppxcz83HDuWRq6UCrUmrR7uPT1xOI0rl7XPBafdIpSgou2XFMVFu2nL6WQaGsqFWx7",
	"w5JgFftpBpgiETGe2hpXp7bT6TnavPnwnF26munlLgzOOeWvZqpYs8I+lQyPWDNzTct1SMHcyE2GWlIx",
	"G0VZkfRieKmqcL/UlYF7WIV76REFNPdDAph6YyGG66+VUJpAY4eFNzs7GMGDuKH+xhZU4GWwGg/s0Wdz",
	"Vj3bphv6xWhsz46vrPHs1GI3I51Php9mV2P6T/mv2alp8g1U8cGxNQbEu4OV0jC9zPqFF5LjFQpPEbtb",
	"iX90Hjm3V6EfObfSB6cQSuix+RWkPjkpsY0y88Q8mU3Gs+nkyhqaMyYt3dBPB6Nz4YPxxJ6dTq7GDY3s",
	"ySzXx9GYavaZldy8fTX+NJ58URVlnXu2EQdd6E7CaWkfvf7qKfB8lffGETmNVqEyRTvKtbD+yii8RNEi",
	"XWXXH1+Ft2F0z03NWpx+eOmLlrsdXmu8RJkf8IslFziZS5MLhSGum0VCkHezIrDDXeWDrK0ovZn5+W3k",
	"zp4aPE8iIynoX7AGXCsAjC1/t2WSks6aytjj9tfU7i/jGn3xyHLCqB1H7ro14Kq0nDKmk5bXZW4qhLe7",
	"jk3eTav4WPJ+HtXTFtSJLBBTLs0Ha4i0eYS0/LqtJK3A6r09wr61VDw6u7jUBpcjOhEQ4YTcm/3+fp+t",
	"GmIYgtjTj/SD/f7+QRrIMVz0Epq9R/bvplfsd8Zp0QiVA2Np5OpH5T1IRqj4uphkSotXks5YDJym3DOB",
	"cduBII791KD2vqWFPWrf3RLu6G7KcM0rh5K7wdhI3/b7z8VDsle/2VRvoZx8ovNyuMOOy1eeCbo8Bq7G",
	"bf8d9g9/XN/MmGvjiGjMDdP+3/3IsU8huoNISzb/2ee8VkEA0LoAtBaFe8nVnakG0LeqypEftVtAgWpk",
	"B/W6aoXR+mLyuT2FF5NPvCV69kxArxxLbMD4PzhjOIt8XyPF6jC9MjY9sepqUailOGDAy69efBR8+G7T",
	"yzc2G0x1vl98gRfpejWjszVERV/fey4zXt7Z/aHWu/65o1dpu18LpnNxaQDdeAQBtNbqYONRvy26e4/c",
	"Fv6myfTW+61+hmgnmG+3vXzNwbNaYNmXpl6HKS6w8SrN8RkkWj5TGi4qxlrB+X0FUfYVH6HdZZc8Z83o",
	"3MB/zK10n0JwLfY/4XJuOV+l6rDZ4ix+pjBMi5Itit4SAp8spfb6N/Z4uIQs6ynCV33+SzwkBDSHUWA9",
	"plmoBr3kt8p1VV2KHALJHiYIgqAs3iKf5oWAfV9ZsM7/cbokKAT4J3ZpQLENgzhCAHn+WsNUdhrQfIAW",
	"UEuRpIEFXfwRzSNYWwK8ZBH7OgYYa9j7G2oI0plmYQ2m4TuOgrTyA++XMdl7pO0bw5cClxVPIfgUNiXW",
	"+ePk1RqP7SKUJ6rDi0clqZhfp2FlW3fwjiKRIdLNoXizzlFIaW7+LwAA//8Dzvmw5H8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
