// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"l0g/E0W2M5RSyGBu/jcAAP//vU9oV9CAAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
