// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"gQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
