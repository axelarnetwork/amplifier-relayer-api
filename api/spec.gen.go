// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9e1PjuJNfxeXfVt3ulSHhMY/ln6sQDJsaSFjHMLs1y2WFrSQe/BpJAbJcvvuVZNmW",
	"bdlWQhi4+81fM0RSq9Xql7pb8pPuREEchTAkWD960mOAQAAJROwvMCUQ0f/ARxDEPtSPdBcC9xbC6Q79",
	"z07xf2mbbuheqB/p3xYQLXVDD0FAhybQDB07cxgACpYsY9qACfLCmW7ojzuzaIf/uFh47u7V1eBE/H3H",
	"C+IIETqWA6XddEOPAZnrR/rMI/PF7a4TBZ1ZFM182GHtq9XK0G9RBFwHYDI42XxJbJ5sRSJIQ0fw28JD",
	"0NWPCFpAcZ0/ITjVj/R/dXJid5JW3DkWYFA0nTmgM4kIQjKHCC4CORLJgKbpi2Smk/he4JHCJHtd+aYl",
	"PUVoLpyChU/0o/2uoQde6AWLQD/aM9JpvJDAGURsHgLw3YDAYHskFyBuSnE7B0FxfAA46EchQcAhPddF",
	"EOMisuAR+gDtvQ/g3UfsOvjbh49ffTJdwIN3/8yDdy7uOo+x33WnIYL+xzvn7uDrA4GOS8JvDvzqgnv5",
	"SmTzNi0pBoRAROH8N8foC3BcOJ3Nv975QRh/Q5gs7h8el/909w8O373/8PHXm6d3H1c/6UaFA1YpYLZU",
	"YdWBF57DcEaFaa8yzNB7cWzew5BcQAJcQBhewPdHU/3oSzPRi8NWxpMeoyiGiHgwIXfgEQLd46WAjBrk",
	"dMDqxtDDhe+DW7prCfUed6LAIzCIyTL5abVa3STrGIQEIiY7NgIhnkJkQQd699BlqK65smOAoWRVAVyH",
	"RhXqqi5JMi/GYAYTsWvZUwQdL/b4kpUIbegYhm5iGaYRCgChunBJoC4Bj6MFcqCwq6pTsHH9VBu2LIJE",
	"dzBMN7BtlurW23T4Z4/MMwRWoih+EQhaxKy8vow0Il3L6N3QfeVLiG6/QofodTw5hiH5f8CPLsTECwHx",
	"olB1R8UhVe2syEQby0GZrVvG5vKgiBhjiHGsIHXPZNYK5Rsp28S+CbZy3j32ZoNkKYKV+rn7Pzv/9WVv",
	"59ebv/5y//OXn2Ta4bjolDWR+SXdQwERC+I4CjFkiykwccmBXMepE3dHBCOlZdo+JoAsEuMYUhfri26Z",
	"fXNwbdI1j6/6fXM81g3dtKyRJUASyEXH7dwDRImBKYAS7EwjVWYdLxwnYYhSg4lQhPSbKp71dKP08SGB",
	"bq8oWi4gcId4gdRsQDZPhSXK2qe65rI2YpzMVrnO9DijvdI2862igv3IVCYbShFphfEZ4CDR8KsMD4AQ",
	"WNashjz+BvB8G5Qp8aVApmz9Mv7sA99/NZOUTf4qNokr1rYtveDdVlTxLP0IuEqe0oNH5ky3t8G/CrE3",
	"C6GbGQKLb6NE26QoSy1Bip1cqVdpvTVvPwaIdai1zpvIeQJ03OQ3bgKWu3tRSOAjUdz6tDc/bvRBGEbE",
	"fITOgkDe5RVFqAaZbYgUAZ6PlZwtgKNWRpehaiUjK8GFNU78onyU4gkMtpEthAmGC2MEHUDyQ7lEVNpo",
	"yqhThlOk3hRFwQuffg2dGjxMQBCr2sLVOsu93n9THH29/z15er3DxvP5f50TsvJxdvsiIGzCmxGCjTTH",
	"CwqPlbFDlT6p8z8Yjq9OTwf9gTm0J2e9dV3/+mkHIV5Mp55DD3tngPr89X1z97/Qh5JpiwbNiXCrpe3T",
	"PivjZW0OXdf3NzjNLCPgJBwN+1dje3SR8YQhYxf7j4llXpuWbZ5swjT5xP0FJlGg1yKWcEltcwvD5R3t",
	"RwveQ0RYzCztZUUv4kS9vp4XF5YyXYPeVtXULsQO8mLq9+tHOiOBxqPt2sMchhrQOFjNYXhot1BDFBd3",
	"V0u8aY3Fn7RoqpE5zHp7WPOC2Pegq5GIDqKNSU+qxbWHuefM2Y+QTerhdN7dv0K9ls0lZGjUiyXOX4ex",
	"q1OVOLvaQVCAUYgJWjjkEkXRlDJtNfSx1QPjBga+cMZjKLNw3+8LiJZiwAa4rkcZBPiXIv5S88V1MwiX",
	"ChJXOKoyqWvqfQohNeJ0FhRhzHySRMw2T288w0sqekb5pDIVfVI6XVN+KPo9ohSmLRogBDjzRILOerb5",
	"uffnxP5DA6GrWWavb0/s0cT843JgmSeT8eBsOBieTcbmeDwYDTVqSfCu9ldoz6HGCbTU/sZOFEOXsxT+",
	"mwo1Fc6Ii7yXCDEdrHk4/A+iAYwjxwNMH3hkroFwmcn4z3B3tpuoCci0sxfOtL9RRACBY7qzCP+tzQmJ",
	"8VGnI4RXkwxlCMlDhO74XzuzIN7B7t0OjnzP9ciyc+tHt53Dg/3Dw1/dD7cHB13ovIfu9B34CLsfDt+/",
	"PzwE++8ODj++d8DHDx2Hcy/uzACBD2DZ6TG4PaqEph5EZ8nPuzjy/3W+1z3o7x3usH/3P/ySqJwiGxUp",
	"pRyxK/BmOWgndfmY0qgPkNbEOiXG5NsCqoTKy4ycTCBj28yAuh7lz4CyMMcFxDGFdfSk9y4vO4OhbVr9",
	"33qD4cS2esPxqWlNsnB0ff6oLctq1AIfm0N7LcB5qszQ+73z89YQIus3HI7sifmH2b+yzcmFOR73zsy1",
	"z5m1kDr0QLz2obUKzu6NPyk7rCWUrJHy0qqulaGf9caTvmWeDGp34wzgPoKuR8Qhlnl6NTyp540zgC04",
	"XYRuzgkDe1zghNEnczg5MS/PR39eUCd2bPeY61qXKLPHAlNQe3MCYz9aBjAkYwKoF1k3E+c5Ncic3URY",
	"54PhJ45vO5LnXnjH0JMglcC4MO3eSc/uTSzzbDC2TasRHoOVGhQLzjxMIMrB8o2f9C4vrVGDsPJt78Ux",
	"iu6rwzkntg3nbFg7vEEgZBCYLFC7Z1rjiTWyew0YcHNkMdvkZimV1DAOef0Q1YArQ49CqOC+lFi7zX+p",
	"MHXbgFwXtfWUbo/ioOKmbDLoel9hKXXKceORyrNW9dZac+ZKs22YnMdaEvh1Iq8wsFG2FcarKcT1ABX0",
	"X9vQFku90fCiB0EPvUV3KnFyFCIBNtMF5fgM/fEmdY1YsKDqsNEmpdPHeoHsjdIwJVePo1br7ImHklLo",
	"1QuB7/2T1E9lVZ7JvDWJs9so8iEIazJnbzOhYejkcTspx1UdjW3OgWmIQvChSt4Rd1UlZlpieuXmtNaL",
	"bXJKa7xDueNZNcG1bk+bG6Pu5dV7aS1nBqP9vKIWI8q2MvMCdKPwY2rrxZ+pRRf/LtltSVNqaBua2IYJ",
	"U1TtZVu7DIJoNWvHs7iW0Fi0gGKLxM6VmmusWalXm82q787tg9ih1v60dhKqNQ1dJEZFb4J74DHNcQbw",
	"MfBB6LSanzQc9pYChIZ0IXT1p1BiAwsBraeqkvVcxYI+XqmXxFJSe9kSJRRKS5LixLVKZirEYDWCCRyZ",
	"3RQnrNDhJY0Ji4eqhqXoLlWiUYZeOsJsKT2vHn+NARPeNTeI7g9VruuW/DbmS0SAOWLylFvlKPfdE5sb",
	"1S6vXyKN+Cp7QbRYe5sayV1CqTKVkZCjjv4slsu0MXColpEr3yQqDU+4bD5HJYqgqNo7gyRJRWLmCFcE",
	"n+OjkgeWZoGluoZPiptmVdcJ+fySMHUZH3m5p/IpcktZ2E2LMpXkRMlWVJY79UKWHatQTVJSKYoAtyir",
	"drIWztTbISQgIC0Ubq08FdYhKJA170C88NZteo9oKzct6gtr6y5ZCNNW7whJ6G3kO1bLMPIw0mvJnTCE",
	"IbU556zPBs+ckG2OusK4ACGYQWQrxJXscv8mtknRkDKQZKH1NJcgWstFjTHFrTATWFtIXeh4AfCLe7nw",
	"QvJRF+4Yd6t3jNdhnoadAAKFOSY19Ku1DZID0sZr2uzslPzRLkHL4Dby16UWOyKxGTIIIrGaSVV3ca16",
	"lF7LCeW3zlIxfeZZgRQFiqOy5spk1SrPWtT6fJ1rlYYlfIKOA+72371PfQTh3l738Ut351ewM715en+4",
	"kl7bu8jDFrV25GVva/KoRZ2L80LOxIuUXCt5B+J6ZRsqzQ++Qi2+DI/nF+FvcG5WDqnVBsby06lC+Xvj",
	"urd2b8qJggCE7pYiTqzSrnRjqb4YUA/AYzZft9uVOXLgURyy160nVDEn/XqMWsDjVRh161WMqrdXCxTw",
	"ojC9xKquuJIBm0mKnPDbk5S557vZBcNixKSFejWS1HQpd6tyScl/DxHJi5+fKdvlUo5/S2lzShXF6hWe",
	"JXkoAGqMYdYIWGM1O7/Xf3p1rhv6mrc15PPxq/zTBfXY5V0KtywuF7e+h+dsi3qOA2MC3TwaqbbdIoxk",
	"7IDAIOWkVXmatD52i3NsXGJLkJfw4VO5yEFeVSuOuamsLEestci23zcvG8rbGrYlvfqgMFKkdLU4DmfP",
	"GKiVxzXg1FbZU4tUPQXltThe6MJHvrMNR2o1kyhOXGMOM6OXTFxGt/poR7ax691QqQJNKazLZszvpYht",
	"2EpKxmtKmNQTCVk5ZQAeB8mAvW7y/lv6Z0uGgU8o05MljOWJD8R+V8e4RgrbEiHpNDI8f19EaBFYkN3Y",
	"yBzXskkKCW8Qn6v5iqNw1wIPQiJfjSOvIfKmngMaHDTBDUvmluFOsSZ2ZD7GdNjYm4VeOBtDjGsza5s+",
	"d0Ml4z66g+7mzzbxiw6XealD2wsqKZ+zt5jYohKsC4G394e69JXCAjGz0UbpeceaVVWwvcmpbaWW4TLy",
	"/TdH5TjyfVUqGfq3CvOry6JEcCSVCs/Y9dIm8pVtuoPyxQr7mr3ZU5OTvlfINhXe/ZlDbzYvPk+U7kST",
	"WSstm0MxOAIJwtNF6G7rcmKSwLeeU2wQAI9qHvVSKaWKA70WN/mclDSyWu5XOBlJ0Pie7z/WHvblR5om",
	"bLf3FmgcOfO1hcHQcYLcRjHh5MAsPB60wQXOpKqXXd68Nq3B6Z/pFc0B0RyAkAexdg/8BcRaDDCGruaF",
	"7DKmcAOz3zs/5/elf/amGgiXv2i3wLmj8GlXLFzIlt5pfNZrRbIdJxGCXDPW+WZ3aTahbcJi2qHMfDkY",
	"GeulSkztaCK5nd12JBGLPNtv+kjLk9qGSe1H+6BMhyvCr/fyFAFUHZe2gcxPXSZdb/hupcfecmROLYiZ",
	"JEHVNIr43sbNpnWlBYnnz32ojNE3vIWgUk4A8J20jIClY9OXv/PJOVSOu7gPr/2+Zlmdqu1r46361sta",
	"Nco848/yNY3+aDi2rau+Pbm0RqNTemBPrkGwWxvp5XwWl+NX8z/3xhcT8zq5dpCof93QE+Uv9qu5wi92",
	"sUzbGvSOz83J5ej8XDFIkK6iqO30fHlcpwm/VDWX0FjWT4UmqoWEHxKJrw6WKp9qt4KKSVg1Lc7bJH2u",
	"kDZ/9guZDfl0W1InlLLVsGcPrs1J+dKLbugXg6E9Ob6yhpNTiz1hcj7qf5pcDek/xb8mp6YpDlDlDwGt",
	"ISDePSwVsOhF1C+8kBwvUHiK2CMoYtN55NxdhX7k3NU2nEJYA4/tb6nCofJYcMtTwcWDwMtXWbwkuzS9",
	"4Pl/on5EEpYSOJ4lMcwT82QyGk7Goyurb04Y5+uGftobnEsbhiN7cjq6GjYMskeTTLcOhlRLn1nJI8hX",
	"w0/D0WdVsahiz5Ik0IXuKBwXcpzVrqfA81X6DSNyGi1CZYh2lGnUapdBeImiGT/RVpuvwrswekjETPDE",
	"jt7am7eb3VBqfLnW0HNrVRUdQpB3uyBwg/eYe+lYWawqdd7WEqzENRNwkkmWZH7JeWupsHPsqLkukhR0",
	"OrQOPSGpoPYKlDCIKrsRg3YcuctWH640csyQTkbeFLEpAV7vUav6aVrJxyKx06gaIqCWdoYY12o+WEKk",
	"TSOkZY8VJUd4VrrrEfadmbzp7OJS610O6EZAhBNwe7vd3S5LzcUwBLGnH+kHu93dA+59M77oJDA7T+zf",
	"VSdP8sQ8U07pwFAauPpRMfHCAOVff6rZ0rxLMhk7b/H4aUowIQcC4tjnmqrzlVczqH2lR5rGWhXZNSuX",
	"SF5WYivd73ZfCockQblald/UG32i+3K4xYmLD0ZJpjwGribkPA67h99vbqaDtWFENGbf6PzvvufaxxDd",
	"Q6QlGU/2KaNFEAC0zBlai8Kd5CFCLgG0V1k4sptUMygRjfQe1qZSYbR2TD6HptAx+QRXImcvxOilW2cN",
	"PP6DzxifRb6vkfwIzR/A5DcIXS0KNc4HdYzXecofgl21ceHLMSEpBs5emsF+8Jcaf7HgCLyHGmjmMq7l",
	"bpcaD7MJjyQ+ST4wt+pkGdEGtyBLNF/gGQ8gpXDW5kTZV+5eymUopoS/q6dQ/XzQm/QT3gp/Z+TSALr1",
	"CAJoqVWZTeT9dbm78yTk/hsVbHXe8md9tsLz7bpYLFZ4UWVc9+Wmt6GWc954k6r5DBIt2ykN5yVZrcz5",
	"bQFR+v0bqd5lzzKnw+jewB/qtja7K3nI+sfRLNOcb1J02G4JGj8VGCZFSY6zM4fAJ/Naff0ba+7PIUtD",
	"yPiruv8FHBIAmsMgsBl5KLFBLsUSCF1VliKHQLKDCYIgKJI3D4p6IWDfWpbElL6fLEkKPH74Lg1cbMMg",
	"jhBAnr/UMKWdBjQfoBnUOCdpYEbPe0TzCNbmAM+Z376MAcYa9v6BGoJ0p5lbg+lREUcBr+jBu0We7DzR",
	"8Y3uS86XJUsh+eQ0BbbxZ7PLtTvreSjPFIdX90o4md/8cZFxpJuxIj0Zci6kMFf/GwAA//+GHw9O8H8A",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
