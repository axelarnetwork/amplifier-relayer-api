// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"KRcymOv/CwAA//9UPe/Rr3oAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
