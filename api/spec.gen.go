// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
