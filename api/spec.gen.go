// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ke4MhRRSmJv/DQAA///337NXBYEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
