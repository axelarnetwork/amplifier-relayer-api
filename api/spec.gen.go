// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9e1PjuJNfxeXfVt3ulSHhMY/ln6sQDJsaSFjHMLs1y2WFrSQe/BpJAbJcvvuVZNmW",
	"bdlWQhi4+81fM0RSq9Xql7pb8pPuREEchTAkWD960mOAQAAJROwvMCUQ0f/ARxDEPtSPdBcC9xbC6Q79",
	"z07xf2mbbuheqB/p3xYQLXVDD0FAhybQDB07cxgACpYsY9qACfLCmW7ojzuzaIf/uFh47u7V1eBE/H3H",
	"C+IIETqWA6XddEOPAZnrR/rMI/PF7a4TBZ1ZFM182GHtq9XK0G9RBFwHYDI42XxJbJ5sRSJIQ0fw28JD",
	"0NWPCFpAcZ0/ITjVj/R/dXJid5JW3DkWYFA0nTmgM4kIQjKHCC4CORLJgKbpi2Smk/he4JHCJHtd+aYl",
	"PUVoLpyChU/0o/2uoQde6AWLQD/aM9JpvJDAGURsHgLw3YDAYHskFyBuSnE7B0FxfAA46EchQcAhPddF",
	"EOMisuAR+gDtvQ/g3UfsOvjbh49ffTJdwIN3/8yDdy7uOo+x33WnIYL+xzvn7uDrA4GOS8JvDvzqgnv5",
	"SmTzNi0pBoRAROH8N8foC3BcOJ3Nv975QRh/Q5gs7h8el/909w8O373/8PHXm6d3H1c/6UaFA1YpYLZU",
	"YdWBF57DcEaFaa8yzNB7cWzew5BcQAJcQBhewPdHU/3oSzPRi8NWxpMeoyiGiHgwIXfgEQLd46WAjBrk",
	"dMDqxtDDhe+DW7prCfUed6LAIzCIyTL5abVa3STrGIQEIiY7NgIhnkJkQQd699BlqK65smOAoWRVAVyH",
	"RhXqqi5JMi/GYAYTsWvZUwQdL/b4kpUIbegYhm5iGaYRCgChunBJoC4Bj6MFcqCwq6pTsHH9VBu2LIJE",
	"dzBMN7BtlurW23T4Z4/MMwRWoih+EQhaxKy8vow0Il3L6N3QfeVLiG6/QofodTw5hiH5f8CPLsTECwHx",
	"olB1R8UhVe2syEQby0GZrVvG5vKgiBhjiHGsIHXPZNYK5Rsp28S+CbZy3j32ZoNkKYKV+rn7Pzv/9WVv",
	"59ebv/5y//OXn2Ta4bjolDWR+SXdQwERC+I4CjFkiykwccmBXMepE3dHBCOlZdo+JoAsEuMYUhfri26Z",
	"fXNwbdI1j6/6fXM81g3dtKyRJUASyEXH7dwDRImBKYAS7EwjVWYdLxwnYYhSg4lQhPSbKp71dKP08SGB",
	"bq8oWi4gcId4gdRsQDZPhSXK2qe65rI2YpzMVrnO9DijvdI2862igv3IVCYbShFphfEZ4CDR8KsMD4AQ",
	"WNashjz+BvB8G5Qp8aVApmz9Mv7sA99/NZOUTf4qNokr1rYtveDdVlTxLP0IuEqe0oNH5ky3t8G/CrE3",
	"C6GbGQKLbyP7QaJyUryl5iBFUa7ZqwTfmssfA8Q61JroTYQ9ATpuch43Act9vigk8JEo7n/am585+iAM",
	"I2I+QmdBIO/yinJUg8w25IoAz8dKHhfAUSu3y1C1kpGVCMMax35RPkpBBQbbyBbCBMOFMYIOIPnJXCIq",
	"bTRl1CnDKVJviqLghY/Ahk6tHiYgiFUN4mqd5V7vvymOvt7/njy93onj+fy/zjFZ+Uy7fREQNuHNCMFG",
	"muMFhcfK2KFKn/QEMBiOr05PB/2BObQnZ711/f/6aQchXkynnkNPfGeAOv71ffMzQKEPJdMWDZoT4VZL",
	"26d9VsbL2hy6ru9vcJpZRsBJOB/2r8b26CLjCUPGLvYfE8u8Ni3bPNmEafKJ+wtMokCvRSzhktrmFobL",
	"O9qPFryHiLDAWdrLil7EiXp9PS8uLGW6Br2tqqldiB3kxdTv1490RgKNh9y1hzkMNaBxsJrD8NBuoYYo",
	"Lu6ulnjTGgtCadFUI3OY9faw5gWx70FXIxEdRBuTnlSLaw9zz5mzHyGb1MPpvLt/hXotm0vI0KgXS5y/",
	"DmNXpypxdrWDoACjEBO0cMgliqIpZdpq/GOrp8YNDHzhjMdQZjG/3xcQLcWoDXBdjzII8C9F/KXmi+tm",
	"EC4VJK5wXmVS19T7FEJqxOksKMKY+SSJmG2e43iGl1T0jPJJZSr6pHS6pvxQ9HtEKUxbNEAIcOaJBJ31",
	"bPNz78+J/YcGQlezzF7fntijifnH5cAyTybjwdlwMDybjM3xeDAaatSS4F3tr9CeQ40TaKn9jZ0ohi5n",
	"Kfw3FWoqnBEXeS8RYjpY83D4H0QDGEeOB5g+8MhcA+Eyk/Gf4e5sN1ETkGlnL5xpf6OIAALHdGcR/lub",
	"ExLjo05HiLEmacoQkocI3fG/dmZBvIPdux0c+Z7rkWXn1o9uO4cH+4eHv7ofbg8OutB5D93pO/ARdj8c",
	"vn9/eAj23x0cfnzvgI8fOg7nXtyZAQIfwLLTY3B7VAlNPYjOkp93ceT/63yve9DfO9xh/+5/+CVROUU2",
	"KlJKOWxX4M1y5E7q8jGlUR8lrQl4SozJtwVUiZeXGTmZQMa2mQF1PcqfAWVhjguIYwrr6EnvXV52BkPb",
	"tPq/9QbDiW31huNT05pkMen6JFJbqtWoBT42h/ZagPN8maH3e+fnrXFE1m84HNkT8w+zf2WbkwtzPO6d",
	"mWufM2shdeiBeO1DaxWc3Rt/UnZYSyhZI+WlVV0rQz/rjSd9yzwZ1O7GGcB9BF2PiEMs8/RqeFLPG2cA",
	"W3C6CN2cEwb2uMAJo0/mcHJiXp6P/rygTuzY7jHXtS5bZo8FpqD25gTGfrQMYEjGBFAvsm4mznNqkDm7",
	"ibDOB8NPHN92JM+98I6hJ0EqgXFh2r2Tnt2bWObZYGybViM8Bis1KBaceZhAlIPlGz/pXV5aowZh5dve",
	"i2MU3VeHc05sG87ZsHZ4g0DIIDBZoHbPtMYTa2T3GjDg5shitsnN8iqpYRzyIiKqAVeGHoVQwX0psXab",
	"/1Jh6rYBuS5q6yndHsVBxU3ZZND1vsJS6pTjxiOVZ63qrbXmzJVm2zA5j7Vk8etEXmFgo2wrjFdTiOsB",
	"Kui/tqEtlnqj4UUPgh56i+5U4uQoRAJspgvK8Rn6403qGrFgQdVho01Kp4/1AtkbpWFKrh5HrdbZEw8l",
	"pdCrFwLf+ycpospKPZN5axJnt1HkQxDWZM7eZkLD0MnjdlKOqzoa25wD0xCF4EOVvCPuqkrMtMT0ys1p",
	"rRfb5JTWeIdyx7NqgmvdnjY3Rt3Lq/fSWs4MRvt5RS1GlG1l5gXoRuHH1NaLP1OLLv5dstuSptTQNjSx",
	"DROmqNrLtnYZBNFq1o5ncS2hsWgBxRaJnSs111izUq82m1XfndsHsUOt/WntJJRsGrpIjIreBPfAY5rj",
	"DOBj4IPQaTU/aTjsLQUIDelC6OpPocQGFgJaT1Ul67mKVX28XC+JpaT2siVKKJSWJBWKa9XNVIjBCgUT",
	"ODK7KU5YocNLGhMWD1UNS9FdqkSjDL10hNlSel49/hoDJrxrbhDdH6pc1637bcyXiABzxOQpt8pR7rsn",
	"NjcqYF6/ThrxVfaCaLH2NjWSu4RSZSojIUcd/Vksl2lj4FAtI1e+SVQannDZfI5KFEFRtXcGSZKKxMwR",
	"rgg+x0clDyzNAkt1DZ8UN82qrhPy+SVh6jI+8ppP5VPklrKwm1ZmKsmJkq2oLHfqhSw7VqGapKRSFAFu",
	"UVbtZC2cqbdDSEBAWi3cWn4qrENQIGtehHjhrdv0MtFWrlvUF9bW3bQQpq1eFJLQ28h3rJZh5GGk15I7",
	"YQhDanPOWZ8Nnjkh4cXSigrjAoRgBpGtEFeyy/2b2CZFQ8pAkoXW01yCaC0XNcYUt8JMYG0hdaHjBcAv",
	"7uXCC8lHXbho3K1eNF6HeRp2AggU5pjU0K/WNkgOSBuvabOzU/JHuwQtg9vIX5da7IjEZsggiMRqJlXd",
	"7bXqUXotJ5RfPUvF9JlnBVIUKI7KmiuTVas8a1Hr83WuVRqW8Ak6Drjbf/c+9RGEy3vdxy/dnV/BzvTm",
	"6f3hSnp37yIPW9TakZe9ssmjFnUuzgs5Ey9Scq3kHYjrlW2oND/4CrX4MjyeX4S/wblZOaRWGxjLT6cK",
	"5e+N697avSknCgIQuluKOLFKu9KNpfpiQD0Aj9l83W5X5siBR3HIXreeUMWc9OsxagGPV2HUrVcxql5h",
	"LVDAi8L0Jqu64koGbCYpcsJvT1Lmnu9mFwyLEZMW6tVIUtPN3K3KJSX/PUQkL35+pmyXSzn+LaXNKVUU",
	"q1d4luShAKgxhlkjYI3V7Pxy/+nVuW7oa97WkM/H7/NPF9Rjl3cp3LK4XNz6Hp6zLeo5DowJdPNopNp2",
	"izCSsQMCg5STVuVp0vrYLc6xcYktQV7Ch0/lIgd5Va045qayshyx1iLbft+8bChva9iW9OqDwkiR0tXi",
	"OJy9ZaBWHteAU1tlTy1S9RSU1+J4oQsf+c42HKnVTKI4cY05zIxeMnEZ3erLHdnGrndDpQo0pbAumzG/",
	"lyK2YSspGa8pYVJPJGTllAF4HCQD9rrJI3Dpny0ZBj6hTE+WMJYnPhD7XR3jGilsS4Sk08jw/H0RoUVg",
	"QXZjI3NcyyYpJLxBfLPmK47CXQs8CIl8NY68hsibeg5ocNAENyyZW4Y7xZrYkfkY02FjbxZ64WwMMa7N",
	"rG365g2VjPvoDrqbv93ELzpc5qUObc+opHzOHmRii0qwLgTe3h/q0qcKC8TMRhulNx5rVlXB9iantpVa",
	"hsvI998clePI91WpZOjfKsyvLosSwZFUKjxj10ubyFe26Q7KFyvsa/ZwT01O+l4h21R4/GcOvdm8+EZR",
	"uhNNZq20bA7F4AgkCE8Xobuty4lJAt96TrFBADyqedRLpZQqDvRa3ORzUtLIarlf4WQkQeN7PgJZe9iX",
	"H2masN3eg6Bx5MzXFgZDxwlyG8WEkwOz8HjQBhc4k6pednnz2rQGp3+mVzQHRHMAQh7E2j3wFxBrMcAY",
	"upoXssuYwg3Mfu/8nN+X/tmbaiBc/qLdAueOwqddsXAhW3qn8VmvFcl2nEQIcs1Y55vdpdmEtgmLaYcy",
	"8+VgZKyXKjG1o4nkdnbbkUQs8my/6SMtT2obJrUf7YMyHa4Iv97LUwRQdVzaBjI/dZl0veG7lR57y5E5",
	"tSBmkgRV0yjiexs3m9aVFiSeP/ehMkbf8BaCSjkBwHfSMgKWjk2f/84n51A57uI+vPYjm2V1qravjbfq",
	"Wy9r1SjzjD/L1zT6o+HYtq769uTSGo1O6YE9uQbBbm2kl/NZXI5fzf/cG19MzOvk2kGi/nVDT5S/2K/m",
	"Cr/YxTJta9A7Pjcnl6Pzc8UgQbqKorbT8+VxnSb8UtVcQmNZPxWaqBYSfkgkvjpYqnyq3QoqJmHVtDhv",
	"k/S5Qtr82c9kNuTTbUmdUMpWw549uDYn5UsvuqFfDIb25PjKGk5OLfaEyfmo/2lyNaT/FP+anJqmOECV",
	"PwS0hoB497BUwKIXUb/wQnK8QOEpYo+giE3nkXN3FfqRc1fbcAphDTy2v6UKh8qLwS3vBRcPAi9fZfGS",
	"7NL6jOf/iSISSWxKYHuWyTBPzJPJaDgZj66svjlh7K8b+mlvcC5tGI7syenoatgwyB5NMgU7GFJVfWYl",
	"zyFfDT8NR59VZaOKPcuUQBe6o3BcSHRWu54Cz1fpN4zIabQIlSHaUaZWq10G4SWKZvxYW22+Cu/C6CGR",
	"NcEdO3prr99udk2p8flaQ89NVlV0CEHe7YLADV5m7qVjZQGr1INbS7AS/0zASSZZkvklh66lws6x8+a6",
	"SFLQ6dA69ITMgtpTUMIgqvFGDNpx5C5bHbnSyDFDOhl5U8SmBHi9l63qp2klHwvHTqNqnICa2xliXKv5",
	"YAmRNo2Qlr1YlJzjWf2uR9gXZ/Kms4tLrXc5oBsBEU7A7e12d7ssPxfDEMSefqQf7HZ3D7gLzviik8Ds",
	"PLF/V5080xPzdDmlA0Np4OpHxewLA5R/B6pmS/MuyWTs0MWDqCnBhEQIiGOfa6rOV17SoPa9Hmkua1Vk",
	"16xmInleia10v9t9KRySLOVqVX5Yb/SJ7svhFicuvholmfIYuJqQ+DjsHn6/uZkO1oYR0Zh9o/O/+55r",
	"H0N0D5GWpD3ZR40WQQDQMmdoLQp3ktcIuQTQXmXhyK5TzaBENNLLWJtKhdHaMfkwmkLH5GNciZy9EKOX",
	"rp418PgPPmN8Fvm+RvJzNH8Fk18jdLUo1Dgf1DFe5yl/DXbVxoUvx4SkGD17aQb7wV9q/MUiJPAeaqCZ",
	"y7iWu11qPNYmvJT4JPnU3KqTpUUb3IIs23yBZzyKlMJZmxNl37t7KZehmBf+rp5C9UNCb9JPeCv8nZFL",
	"A+jWIwigpVZlNpH31+XuzpNQANCoYKvzlj/wsxWeb9fFYsXCiyrjum84vQ21nPPGm1TNZ5Bo2U5pOK/L",
	"amXObwuI0o/gSPUue5s5HUb3Bv5Qt7UpXslr1j+OZpnmfJOiw3ZL0PipwDApShKdnTkEPpnX6uvfWHN/",
	"DlkuQsZf1f0v4JAA0BwGgc3IQ4kNcinWQeiqshQ5BJIdTBAEQZG8eVDUCwH76rIkpvT9ZElS5fHDd2ng",
	"YhsGcYQA8vylhintNKD5AM2gxjlJAzN63iOaR7A2B3jO/PZlDDDWsPcP1BCkO83cGkyPijgKeFkP3i3y",
	"ZOeJjm90X3K+LFkKycenKbCNP6BdLuBZz0N5pji8ulfCyfzmj4uMI92MFenJkHMhhbn63wAAAP//wX2X",
	"H/p/AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
