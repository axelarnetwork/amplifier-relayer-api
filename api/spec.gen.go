// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"N9d/AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
