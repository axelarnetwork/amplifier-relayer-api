// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
