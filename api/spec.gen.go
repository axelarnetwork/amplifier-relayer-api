// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"cy5kMFf/FwAA//8nDqxmj3oAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
