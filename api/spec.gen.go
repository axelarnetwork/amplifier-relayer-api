// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
