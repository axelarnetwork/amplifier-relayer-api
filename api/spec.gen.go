// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"fwEAAP//Dw44PU96AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
