// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
