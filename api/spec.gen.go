// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//GNCx+2eDAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
