// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PublishEventsWithBody request with any body
	PublishEventsWithBody(ctx context.Context, chain Chain, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublishEvents(ctx context.Context, chain Chain, body PublishEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTasks request
	GetTasks(ctx context.Context, chain Chain, params *GetTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BroadcastMsgExecuteContractWithBody request with any body
	BroadcastMsgExecuteContractWithBody(ctx context.Context, wasmContractAddress WasmContractAddress, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BroadcastMsgExecuteContract(ctx context.Context, wasmContractAddress WasmContractAddress, body BroadcastMsgExecuteContractJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMsgExecuteContractBroadcastStatus request
	GetMsgExecuteContractBroadcastStatus(ctx context.Context, wasmContractAddress WasmContractAddress, broadcastID BroadcastID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryContractStateWithBody request with any body
	QueryContractStateWithBody(ctx context.Context, wasmContractAddress WasmContractAddress, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryContractState(ctx context.Context, wasmContractAddress WasmContractAddress, body QueryContractStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HealthCheck request
	HealthCheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StorePayloadWithBody request with any body
	StorePayloadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPayload request
	GetPayload(ctx context.Context, hash Keccak256Hash, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PublishEventsWithBody(ctx context.Context, chain Chain, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishEventsRequestWithBody(c.Server, chain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishEvents(ctx context.Context, chain Chain, body PublishEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishEventsRequest(c.Server, chain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTasks(ctx context.Context, chain Chain, params *GetTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTasksRequest(c.Server, chain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BroadcastMsgExecuteContractWithBody(ctx context.Context, wasmContractAddress WasmContractAddress, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBroadcastMsgExecuteContractRequestWithBody(c.Server, wasmContractAddress, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BroadcastMsgExecuteContract(ctx context.Context, wasmContractAddress WasmContractAddress, body BroadcastMsgExecuteContractJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBroadcastMsgExecuteContractRequest(c.Server, wasmContractAddress, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMsgExecuteContractBroadcastStatus(ctx context.Context, wasmContractAddress WasmContractAddress, broadcastID BroadcastID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMsgExecuteContractBroadcastStatusRequest(c.Server, wasmContractAddress, broadcastID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryContractStateWithBody(ctx context.Context, wasmContractAddress WasmContractAddress, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryContractStateRequestWithBody(c.Server, wasmContractAddress, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryContractState(ctx context.Context, wasmContractAddress WasmContractAddress, body QueryContractStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryContractStateRequest(c.Server, wasmContractAddress, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HealthCheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealthCheckRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StorePayloadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStorePayloadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPayload(ctx context.Context, hash Keccak256Hash, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPayloadRequest(c.Server, hash)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPublishEventsRequest calls the generic PublishEvents builder with application/json body
func NewPublishEventsRequest(server string, chain Chain, body PublishEventsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublishEventsRequestWithBody(server, chain, "application/json", bodyReader)
}

// NewPublishEventsRequestWithBody generates requests for PublishEvents with any type of body
func NewPublishEventsRequestWithBody(server string, chain Chain, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "chain", runtime.ParamLocationPath, chain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chains/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTasksRequest generates requests for GetTasks
func NewGetTasksRequest(server string, chain Chain, params *GetTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "chain", runtime.ParamLocationPath, chain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chains/%s/tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBroadcastMsgExecuteContractRequest calls the generic BroadcastMsgExecuteContract builder with application/json body
func NewBroadcastMsgExecuteContractRequest(server string, wasmContractAddress WasmContractAddress, body BroadcastMsgExecuteContractJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBroadcastMsgExecuteContractRequestWithBody(server, wasmContractAddress, "application/json", bodyReader)
}

// NewBroadcastMsgExecuteContractRequestWithBody generates requests for BroadcastMsgExecuteContract with any type of body
func NewBroadcastMsgExecuteContractRequestWithBody(server string, wasmContractAddress WasmContractAddress, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "wasmContractAddress", runtime.ParamLocationPath, wasmContractAddress)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contracts/%s/broadcasts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMsgExecuteContractBroadcastStatusRequest generates requests for GetMsgExecuteContractBroadcastStatus
func NewGetMsgExecuteContractBroadcastStatusRequest(server string, wasmContractAddress WasmContractAddress, broadcastID BroadcastID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "wasmContractAddress", runtime.ParamLocationPath, wasmContractAddress)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "broadcastID", runtime.ParamLocationPath, broadcastID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contracts/%s/broadcasts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryContractStateRequest calls the generic QueryContractState builder with application/json body
func NewQueryContractStateRequest(server string, wasmContractAddress WasmContractAddress, body QueryContractStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryContractStateRequestWithBody(server, wasmContractAddress, "application/json", bodyReader)
}

// NewQueryContractStateRequestWithBody generates requests for QueryContractState with any type of body
func NewQueryContractStateRequestWithBody(server string, wasmContractAddress WasmContractAddress, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "wasmContractAddress", runtime.ParamLocationPath, wasmContractAddress)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contracts/%s/queries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewHealthCheckRequest generates requests for HealthCheck
func NewHealthCheckRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStorePayloadRequestWithBody generates requests for StorePayload with any type of body
func NewStorePayloadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payloads")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPayloadRequest generates requests for GetPayload
func NewGetPayloadRequest(server string, hash Keccak256Hash) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hash", runtime.ParamLocationPath, hash)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payloads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PublishEventsWithBodyWithResponse request with any body
	PublishEventsWithBodyWithResponse(ctx context.Context, chain Chain, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishEventsResponse, error)

	PublishEventsWithResponse(ctx context.Context, chain Chain, body PublishEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*PublishEventsResponse, error)

	// GetTasksWithResponse request
	GetTasksWithResponse(ctx context.Context, chain Chain, params *GetTasksParams, reqEditors ...RequestEditorFn) (*GetTasksResponse, error)

	// BroadcastMsgExecuteContractWithBodyWithResponse request with any body
	BroadcastMsgExecuteContractWithBodyWithResponse(ctx context.Context, wasmContractAddress WasmContractAddress, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BroadcastMsgExecuteContractResponse, error)

	BroadcastMsgExecuteContractWithResponse(ctx context.Context, wasmContractAddress WasmContractAddress, body BroadcastMsgExecuteContractJSONRequestBody, reqEditors ...RequestEditorFn) (*BroadcastMsgExecuteContractResponse, error)

	// GetMsgExecuteContractBroadcastStatusWithResponse request
	GetMsgExecuteContractBroadcastStatusWithResponse(ctx context.Context, wasmContractAddress WasmContractAddress, broadcastID BroadcastID, reqEditors ...RequestEditorFn) (*GetMsgExecuteContractBroadcastStatusResponse, error)

	// QueryContractStateWithBodyWithResponse request with any body
	QueryContractStateWithBodyWithResponse(ctx context.Context, wasmContractAddress WasmContractAddress, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryContractStateResponse, error)

	QueryContractStateWithResponse(ctx context.Context, wasmContractAddress WasmContractAddress, body QueryContractStateJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryContractStateResponse, error)

	// HealthCheckWithResponse request
	HealthCheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthCheckResponse, error)

	// StorePayloadWithBodyWithResponse request with any body
	StorePayloadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StorePayloadResponse, error)

	// GetPayloadWithResponse request
	GetPayloadWithResponse(ctx context.Context, hash Keccak256Hash, reqEditors ...RequestEditorFn) (*GetPayloadResponse, error)
}

type PublishEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PublishEventsResult
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PublishEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTasksResult
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BroadcastMsgExecuteContractResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BroadcastResponse
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BroadcastMsgExecuteContractResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BroadcastMsgExecuteContractResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMsgExecuteContractBroadcastStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BroadcastStatusResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetMsgExecuteContractBroadcastStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMsgExecuteContractBroadcastStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryContractStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContractQueryResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r QueryContractStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryContractStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HealthCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r HealthCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HealthCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StorePayloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StorePayloadResult
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r StorePayloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StorePayloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPayloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPayloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPayloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PublishEventsWithBodyWithResponse request with arbitrary body returning *PublishEventsResponse
func (c *ClientWithResponses) PublishEventsWithBodyWithResponse(ctx context.Context, chain Chain, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishEventsResponse, error) {
	rsp, err := c.PublishEventsWithBody(ctx, chain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishEventsResponse(rsp)
}

func (c *ClientWithResponses) PublishEventsWithResponse(ctx context.Context, chain Chain, body PublishEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*PublishEventsResponse, error) {
	rsp, err := c.PublishEvents(ctx, chain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishEventsResponse(rsp)
}

// GetTasksWithResponse request returning *GetTasksResponse
func (c *ClientWithResponses) GetTasksWithResponse(ctx context.Context, chain Chain, params *GetTasksParams, reqEditors ...RequestEditorFn) (*GetTasksResponse, error) {
	rsp, err := c.GetTasks(ctx, chain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTasksResponse(rsp)
}

// BroadcastMsgExecuteContractWithBodyWithResponse request with arbitrary body returning *BroadcastMsgExecuteContractResponse
func (c *ClientWithResponses) BroadcastMsgExecuteContractWithBodyWithResponse(ctx context.Context, wasmContractAddress WasmContractAddress, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BroadcastMsgExecuteContractResponse, error) {
	rsp, err := c.BroadcastMsgExecuteContractWithBody(ctx, wasmContractAddress, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBroadcastMsgExecuteContractResponse(rsp)
}

func (c *ClientWithResponses) BroadcastMsgExecuteContractWithResponse(ctx context.Context, wasmContractAddress WasmContractAddress, body BroadcastMsgExecuteContractJSONRequestBody, reqEditors ...RequestEditorFn) (*BroadcastMsgExecuteContractResponse, error) {
	rsp, err := c.BroadcastMsgExecuteContract(ctx, wasmContractAddress, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBroadcastMsgExecuteContractResponse(rsp)
}

// GetMsgExecuteContractBroadcastStatusWithResponse request returning *GetMsgExecuteContractBroadcastStatusResponse
func (c *ClientWithResponses) GetMsgExecuteContractBroadcastStatusWithResponse(ctx context.Context, wasmContractAddress WasmContractAddress, broadcastID BroadcastID, reqEditors ...RequestEditorFn) (*GetMsgExecuteContractBroadcastStatusResponse, error) {
	rsp, err := c.GetMsgExecuteContractBroadcastStatus(ctx, wasmContractAddress, broadcastID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMsgExecuteContractBroadcastStatusResponse(rsp)
}

// QueryContractStateWithBodyWithResponse request with arbitrary body returning *QueryContractStateResponse
func (c *ClientWithResponses) QueryContractStateWithBodyWithResponse(ctx context.Context, wasmContractAddress WasmContractAddress, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryContractStateResponse, error) {
	rsp, err := c.QueryContractStateWithBody(ctx, wasmContractAddress, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryContractStateResponse(rsp)
}

func (c *ClientWithResponses) QueryContractStateWithResponse(ctx context.Context, wasmContractAddress WasmContractAddress, body QueryContractStateJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryContractStateResponse, error) {
	rsp, err := c.QueryContractState(ctx, wasmContractAddress, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryContractStateResponse(rsp)
}

// HealthCheckWithResponse request returning *HealthCheckResponse
func (c *ClientWithResponses) HealthCheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthCheckResponse, error) {
	rsp, err := c.HealthCheck(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealthCheckResponse(rsp)
}

// StorePayloadWithBodyWithResponse request with arbitrary body returning *StorePayloadResponse
func (c *ClientWithResponses) StorePayloadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StorePayloadResponse, error) {
	rsp, err := c.StorePayloadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStorePayloadResponse(rsp)
}

// GetPayloadWithResponse request returning *GetPayloadResponse
func (c *ClientWithResponses) GetPayloadWithResponse(ctx context.Context, hash Keccak256Hash, reqEditors ...RequestEditorFn) (*GetPayloadResponse, error) {
	rsp, err := c.GetPayload(ctx, hash, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPayloadResponse(rsp)
}

// ParsePublishEventsResponse parses an HTTP response from a PublishEventsWithResponse call
func ParsePublishEventsResponse(rsp *http.Response) (*PublishEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublishEventsResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTasksResponse parses an HTTP response from a GetTasksWithResponse call
func ParseGetTasksResponse(rsp *http.Response) (*GetTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTasksResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBroadcastMsgExecuteContractResponse parses an HTTP response from a BroadcastMsgExecuteContractWithResponse call
func ParseBroadcastMsgExecuteContractResponse(rsp *http.Response) (*BroadcastMsgExecuteContractResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BroadcastMsgExecuteContractResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BroadcastResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMsgExecuteContractBroadcastStatusResponse parses an HTTP response from a GetMsgExecuteContractBroadcastStatusWithResponse call
func ParseGetMsgExecuteContractBroadcastStatusResponse(rsp *http.Response) (*GetMsgExecuteContractBroadcastStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMsgExecuteContractBroadcastStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BroadcastStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseQueryContractStateResponse parses an HTTP response from a QueryContractStateWithResponse call
func ParseQueryContractStateResponse(rsp *http.Response) (*QueryContractStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryContractStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContractQueryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseHealthCheckResponse parses an HTTP response from a HealthCheckWithResponse call
func ParseHealthCheckResponse(rsp *http.Response) (*HealthCheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HealthCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseStorePayloadResponse parses an HTTP response from a StorePayloadWithResponse call
func ParseStorePayloadResponse(rsp *http.Response) (*StorePayloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StorePayloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StorePayloadResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPayloadResponse parses an HTTP response from a GetPayloadWithResponse call
func ParseGetPayloadResponse(rsp *http.Response) (*GetPayloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPayloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
