// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"encoding/json"
	"errors"
	"fmt"
	"time"

	uuid "github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
)

// Defines values for BroadcastStatus.
const (
	BroadcastStatusError    BroadcastStatus = "ERROR"
	BroadcastStatusReceived BroadcastStatus = "RECEIVED"
	BroadcastStatusSuccess  BroadcastStatus = "SUCCESS"
)

// Defines values for CannotExecuteMessageReason.
const (
	CannotExecuteMessageReasonError           CannotExecuteMessageReason = "ERROR"
	CannotExecuteMessageReasonInsufficientGas CannotExecuteMessageReason = "INSUFFICIENT_GAS"
)

// Defines values for CannotExecuteTaskReason.
const (
	CannotExecuteTaskReasonCustom          CannotExecuteTaskReason = "CUSTOM"
	CannotExecuteTaskReasonError           CannotExecuteTaskReason = "ERROR"
	CannotExecuteTaskReasonInsufficientGas CannotExecuteTaskReason = "INSUFFICIENT_GAS"
	CannotExecuteTaskReasonTxReverted      CannotExecuteTaskReason = "TX_REVERTED"
)

// Defines values for CannotRouteMessageReason.
const (
	CannotRouteMessageReasonCustom CannotRouteMessageReason = "CUSTOM"
	CannotRouteMessageReasonError  CannotRouteMessageReason = "ERROR"
)

// Defines values for EventType.
const (
	EventTypeAppInterchainTransferReceived       EventType = "APP/INTERCHAIN_TRANSFER_RECEIVED"
	EventTypeAppInterchainTransferSent           EventType = "APP/INTERCHAIN_TRANSFER_SENT"
	EventTypeCall                                EventType = "CALL"
	EventTypeCannotExecuteMessage                EventType = "CANNOT_EXECUTE_MESSAGE"
	EventTypeCannotExecuteMessageV2              EventType = "CANNOT_EXECUTE_MESSAGE/V2"
	EventTypeCannotExecuteTask                   EventType = "CANNOT_EXECUTE_TASK"
	EventTypeCannotRouteMessage                  EventType = "CANNOT_ROUTE_MESSAGE"
	EventTypeGasCredit                           EventType = "GAS_CREDIT"
	EventTypeGasRefunded                         EventType = "GAS_REFUNDED"
	EventTypeITSInterchainTokenDeploymentStarted EventType = "ITS/INTERCHAIN_TOKEN_DEPLOYMENT_STARTED"
	EventTypeITSInterchainTransfer               EventType = "ITS/INTERCHAIN_TRANSFER"
	EventTypeITSLinkTokenStarted                 EventType = "ITS/LINK_TOKEN_STARTED"
	EventTypeITSTokenMetadataRegistered          EventType = "ITS/TOKEN_METADATA_REGISTERED"
	EventTypeMessageApproved                     EventType = "MESSAGE_APPROVED"
	EventTypeMessageExecuted                     EventType = "MESSAGE_EXECUTED"
	EventTypeMessageExecutedV2                   EventType = "MESSAGE_EXECUTED/V2"
	EventTypeSignersRotated                      EventType = "SIGNERS_ROTATED"
)

// Defines values for MessageExecutionStatus.
const (
	MessageExecutionStatusReverted   MessageExecutionStatus = "REVERTED"
	MessageExecutionStatusSuccessful MessageExecutionStatus = "SUCCESSFUL"
)

// Defines values for PublishEventStatus.
const (
	PublishEventStatusAccepted PublishEventStatus = "ACCEPTED"
	PublishEventStatusError    PublishEventStatus = "ERROR"
)

// Defines values for TaskType.
const (
	TaskTypeConstructProof               TaskType = "CONSTRUCT_PROOF"
	TaskTypeExecute                      TaskType = "EXECUTE"
	TaskTypeGatewayTransaction           TaskType = "GATEWAY_TX"
	TaskTypeReactToExpiredSigningSession TaskType = "REACT_TO_EXPIRED_SIGNING_SESSION"
	TaskTypeReactToRetriablePoll         TaskType = "REACT_TO_RETRIABLE_POLL"
	TaskTypeReactToWasmEvent             TaskType = "REACT_TO_WASM_EVENT"
	TaskTypeRefund                       TaskType = "REFUND"
	TaskTypeVerify                       TaskType = "VERIFY"
)

// Defines values for TokenManagerType.
const (
	TokenManagerLockUnlock            TokenManagerType = "LOCK_UNLOCK"
	TokenManagerLockUnlockFee         TokenManagerType = "LOCK_UNLOCK_FEE"
	TokenManagerMintBurn              TokenManagerType = "MINT_BURN"
	TokenManagerMintBurnFrom          TokenManagerType = "MINT_BURN_FROM"
	TokenManagerNativeInterchainToken TokenManagerType = "NATIVE_INTERCHAIN_TOKEN"
)

// Defines values for VerificationStatus.
const (
	VerificationStatusFailedOnSourceChain    VerificationStatus = "FAILED_ON_SOURCE_CHAIN"
	VerificationStatusFailedToVerify         VerificationStatus = "FAILED_TO_VERIFY"
	VerificationStatusInProgress             VerificationStatus = "IN_PROGRESS"
	VerificationStatusNotFoundOnSourceChain  VerificationStatus = "NOT_FOUND_ON_SOURCE_CHAIN"
	VerificationStatusSucceededOnSourceChain VerificationStatus = "SUCCEEDED_ON_SOURCE_CHAIN"
	VerificationStatusUnknown                VerificationStatus = "UNKNOWN"
)

// Address defines model for Address.
type Address = string

// AppEventMetadata defines model for AppEventMetadata.
type AppEventMetadata struct {
	EmittedByAddress *Address   `json:"emittedByAddress,omitempty"`
	Finalized        *bool      `json:"finalized,omitempty"`
	FromAddress      *Address   `json:"fromAddress,omitempty"`
	Timestamp        *time.Time `json:"timestamp,omitempty"`
	TxID             *string    `json:"txID,omitempty"`
}

// AppInterchainTransferReceivedEvent defines model for AppInterchainTransferReceivedEvent.
type AppInterchainTransferReceivedEvent struct {
	EventID       string                             `json:"eventID"`
	MessageID     string                             `json:"messageID"`
	Meta          *AppEventMetadata                  `json:"meta,omitempty"`
	Recipient     Address                            `json:"recipient"`
	Sender        []byte                             `json:"sender"`
	SourceAddress Address                            `json:"sourceAddress"`
	SourceChain   string                             `json:"sourceChain"`
	TokenReceived InterchainTransferTokenWithAddress `json:"tokenReceived"`
}

// AppInterchainTransferSentEvent defines model for AppInterchainTransferSentEvent.
type AppInterchainTransferSentEvent struct {
	DestinationChain           string                             `json:"destinationChain"`
	DestinationContractAddress Address                            `json:"destinationContractAddress"`
	EventID                    string                             `json:"eventID"`
	MessageID                  string                             `json:"messageID"`
	Meta                       *AppEventMetadata                  `json:"meta,omitempty"`
	Recipient                  []byte                             `json:"recipient"`
	Sender                     Address                            `json:"sender"`
	TokenSpent                 InterchainTransferTokenWithAddress `json:"tokenSpent"`
}

// BigInt defines model for BigInt.
type BigInt = string

// BroadcastID defines model for BroadcastID.
type BroadcastID = uuid.UUID

// BroadcastResponse defines model for BroadcastResponse.
type BroadcastResponse struct {
	BroadcastID BroadcastID `json:"broadcastID"`
}

// BroadcastStatus defines model for BroadcastStatus.
type BroadcastStatus string

// BroadcastStatusResponse defines model for BroadcastStatusResponse.
type BroadcastStatusResponse struct {
	CompletedAt *time.Time      `json:"completedAt,omitempty"`
	Error       *string         `json:"error,omitempty"`
	ReceivedAt  time.Time       `json:"receivedAt"`
	Status      BroadcastStatus `json:"status"`
	TxEvents    *[]WasmEvent    `json:"txEvents,omitempty"`
	TxHash      *string         `json:"txHash,omitempty"`
}

// CallEvent defines model for CallEvent.
type CallEvent struct {
	DestinationChain string             `json:"destinationChain"`
	EventID          string             `json:"eventID"`
	Message          Message            `json:"message"`
	Meta             *CallEventMetadata `json:"meta,omitempty"`
	Payload          []byte             `json:"payload"`
	WithToken        *UnsignedToken     `json:"withToken,omitempty"`
}

// CallEventMetadata defines model for CallEventMetadata.
type CallEventMetadata struct {
	Finalized         *bool           `json:"finalized,omitempty"`
	FromAddress       *Address        `json:"fromAddress,omitempty"`
	ParentMessageID   *string         `json:"parentMessageID,omitempty"`
	ParentSourceChain *string         `json:"parentSourceChain,omitempty"`
	SourceContext     *MessageContext `json:"sourceContext,omitempty"`
	Timestamp         *time.Time      `json:"timestamp,omitempty"`
	TxID              *string         `json:"txID,omitempty"`
}

// CannotExecuteMessageEvent defines model for CannotExecuteMessageEvent.
type CannotExecuteMessageEvent struct {
	Details string                             `json:"details"`
	EventID string                             `json:"eventID"`
	Meta    *CannotExecuteMessageEventMetadata `json:"meta,omitempty"`
	// Deprecated:
	Reason     CannotExecuteMessageReason `json:"reason"`
	TaskItemID TaskItemID                 `json:"taskItemID"`
}

// CannotExecuteMessageEventMetadata defines model for CannotExecuteMessageEventMetadata.
type CannotExecuteMessageEventMetadata struct {
	FromAddress *Address   `json:"fromAddress,omitempty"`
	Timestamp   *time.Time `json:"timestamp,omitempty"`
}

// CannotExecuteMessageEventV2 defines model for CannotExecuteMessageEventV2.
type CannotExecuteMessageEventV2 struct {
	Details   string                               `json:"details"`
	EventID   string                               `json:"eventID"`
	MessageID string                               `json:"messageID"`
	Meta      *CannotExecuteMessageEventV2Metadata `json:"meta,omitempty"`
	// Deprecated:
	Reason      CannotExecuteMessageReason `json:"reason"`
	SourceChain string                     `json:"sourceChain"`
}

// CannotExecuteMessageEventV2Metadata defines model for CannotExecuteMessageEventV2Metadata.
type CannotExecuteMessageEventV2Metadata struct {
	FromAddress *Address    `json:"fromAddress,omitempty"`
	TaskItemID  *TaskItemID `json:"taskItemID,omitempty"`
	Timestamp   *time.Time  `json:"timestamp,omitempty"`
}

// CannotExecuteMessageReason defines model for CannotExecuteMessageReason.
type CannotExecuteMessageReason string

// CannotExecuteTaskEvent defines model for CannotExecuteTaskEvent.
type CannotExecuteTaskEvent struct {
	Cost       *Cost                   `json:"cost,omitempty"`
	Details    string                  `json:"details"`
	EventID    string                  `json:"eventID"`
	Meta       *EventMetadata          `json:"meta,omitempty"`
	Reason     CannotExecuteTaskReason `json:"reason"`
	TaskItemID TaskItemID              `json:"taskItemID"`
}

// CannotExecuteTaskReason defines model for CannotExecuteTaskReason.
type CannotExecuteTaskReason string

// CannotRouteMessageEvent defines model for CannotRouteMessageEvent.
type CannotRouteMessageEvent struct {
	Details   string         `json:"details"`
	EventID   string         `json:"eventID"`
	MessageID string         `json:"messageID"`
	Meta      *EventMetadata `json:"meta,omitempty"`
	// Deprecated:
	Reason CannotRouteMessageReason `json:"reason"`
}

// CannotRouteMessageReason defines model for CannotRouteMessageReason.
type CannotRouteMessageReason string

// ConstructProofTask defines model for ConstructProofTask.
type ConstructProofTask struct {
	Message Message `json:"message"`
	Payload []byte  `json:"payload"`
}

// ContractQueryResponse defines model for ContractQueryResponse.
type ContractQueryResponse map[string]interface{}

// Cost defines model for Cost.
type Cost struct {
	union json.RawMessage
}

// CrossChainID defines model for CrossChainID.
type CrossChainID struct {
	MessageID   string `json:"messageID"`
	SourceChain string `json:"sourceChain"`
}

// DestinationChainTaskMetadata Metadata attached to GATEWAY_TX and REACT_TO_EXPIRED_SIGNING_SESSION tasks.
// The property `scopedMessages` can be omitted if the task isn't associated with any message (e.g. when executing `rotateSigners` https://github.com/axelarnetwork/axelar-gmp-sdk-solidity/blob/432449d7b330ec6edf5a8e0746644a253486ca87/contracts/gateway/AxelarAmplifierGateway.sol#L103C14-L103C27).
type DestinationChainTaskMetadata struct {
	ScopedMessages *[]CrossChainID `json:"scopedMessages,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error     string  `json:"error"`
	RequestID *string `json:"requestID,omitempty"`
}

// Event defines model for Event.
type Event struct {
	Type  EventType `json:"type"`
	union json.RawMessage
}

// EventBase defines model for EventBase.
type EventBase struct {
	EventID string         `json:"eventID"`
	Meta    *EventMetadata `json:"meta,omitempty"`
}

// EventMetadata defines model for EventMetadata.
type EventMetadata struct {
	Finalized   *bool      `json:"finalized,omitempty"`
	FromAddress *Address   `json:"fromAddress,omitempty"`
	Timestamp   *time.Time `json:"timestamp,omitempty"`
	TxID        *string    `json:"txID,omitempty"`
}

// EventType defines model for EventType.
type EventType string

// ExecuteTask defines model for ExecuteTask.
type ExecuteTask struct {
	AvailableGasBalance Token   `json:"availableGasBalance"`
	Message             Message `json:"message"`
	Payload             []byte  `json:"payload"`
}

// Fee defines model for Fee.
type Fee struct {
	Description *string       `json:"description,omitempty"`
	ID          string        `json:"id"`
	Meta        *FeeMetadata  `json:"meta,omitempty"`
	Token       UnsignedToken `json:"token"`
}

// FeeMetadata defines model for FeeMetadata.
type FeeMetadata struct {
	TxID *string `json:"txID,omitempty"`
}

// Fees defines model for Fees.
type Fees = []Fee

// GasCreditEvent defines model for GasCreditEvent.
type GasCreditEvent struct {
	EventID       string         `json:"eventID"`
	MessageID     string         `json:"messageID"`
	Meta          *EventMetadata `json:"meta,omitempty"`
	Payment       UnsignedToken  `json:"payment"`
	RefundAddress Address        `json:"refundAddress"`
}

// GasRefundedEvent defines model for GasRefundedEvent.
type GasRefundedEvent struct {
	Cost             Cost           `json:"cost"`
	EventID          string         `json:"eventID"`
	MessageID        string         `json:"messageID"`
	Meta             *EventMetadata `json:"meta,omitempty"`
	RecipientAddress Address        `json:"recipientAddress"`
	RefundedAmount   UnsignedToken  `json:"refundedAmount"`
}

// GatewayTransactionTask defines model for GatewayTransactionTask.
type GatewayTransactionTask struct {
	ExecuteData []byte `json:"executeData"`
}

// GetTasksResult defines model for GetTasksResult.
type GetTasksResult struct {
	Tasks []TaskItem `json:"tasks"`
}

// ITSInterchainTokenDeploymentStartedEvent defines model for ITSInterchainTokenDeploymentStartedEvent.
type ITSInterchainTokenDeploymentStartedEvent struct {
	DestinationChain string                    `json:"destinationChain"`
	EventID          string                    `json:"eventID"`
	MessageID        string                    `json:"messageID"`
	Meta             *EventMetadata            `json:"meta,omitempty"`
	Token            InterchainTokenDefinition `json:"token"`
}

// ITSInterchainTransferEvent defines model for ITSInterchainTransferEvent.
type ITSInterchainTransferEvent struct {
	DataHash           []byte                        `json:"dataHash"`
	DestinationAddress []byte                        `json:"destinationAddress"`
	DestinationChain   string                        `json:"destinationChain"`
	EventID            string                        `json:"eventID"`
	MessageID          string                        `json:"messageID"`
	Meta               *EventMetadata                `json:"meta,omitempty"`
	SourceAddress      Address                       `json:"sourceAddress"`
	TokenSpent         InterchainTransferTokenWithID `json:"tokenSpent"`
}

// ITSLinkTokenStartedEvent defines model for ITSLinkTokenStartedEvent.
type ITSLinkTokenStartedEvent struct {
	DestinationChain        string           `json:"destinationChain"`
	DestinationTokenAddress []byte           `json:"destinationTokenAddress"`
	EventID                 string           `json:"eventID"`
	MessageID               string           `json:"messageID"`
	Meta                    *EventMetadata   `json:"meta,omitempty"`
	SourceTokenAddress      []byte           `json:"sourceTokenAddress"`
	TokenID                 string           `json:"tokenID"`
	TokenManagerType        TokenManagerType `json:"tokenManagerType"`
}

// ITSTokenMetadataRegisteredEvent defines model for ITSTokenMetadataRegisteredEvent.
type ITSTokenMetadataRegisteredEvent struct {
	Address   Address        `json:"address"`
	Decimals  uint8          `json:"decimals"`
	EventID   string         `json:"eventID"`
	MessageID string         `json:"messageID"`
	Meta      *EventMetadata `json:"meta,omitempty"`
}

// InterchainTokenDefinition defines model for InterchainTokenDefinition.
type InterchainTokenDefinition struct {
	Decimals uint8  `json:"decimals"`
	ID       string `json:"id"`
	Name     string `json:"name"`
	Symbol   string `json:"symbol"`
}

// InterchainTransferTokenWithAddress defines model for InterchainTransferTokenWithAddress.
type InterchainTransferTokenWithAddress struct {
	Amount       UnsignedBigInt `json:"amount"`
	TokenAddress Address        `json:"tokenAddress"`
}

// InterchainTransferTokenWithID defines model for InterchainTransferTokenWithID.
type InterchainTransferTokenWithID struct {
	Amount  UnsignedBigInt `json:"amount"`
	TokenID string         `json:"tokenID"`
}

// Keccak256Hash defines model for Keccak256Hash.
type Keccak256Hash = string

// Message defines model for Message.
type Message struct {
	DestinationAddress Address `json:"destinationAddress"`
	MessageID          string  `json:"messageID"`
	PayloadHash        []byte  `json:"payloadHash"`
	SourceAddress      Address `json:"sourceAddress"`
	SourceChain        string  `json:"sourceChain"`
}

// MessageApprovedEvent defines model for MessageApprovedEvent.
type MessageApprovedEvent struct {
	Cost    Cost                          `json:"cost"`
	EventID string                        `json:"eventID"`
	Message Message                       `json:"message"`
	Meta    *MessageApprovedEventMetadata `json:"meta,omitempty"`
}

// MessageApprovedEventMetadata defines model for MessageApprovedEventMetadata.
type MessageApprovedEventMetadata struct {
	CommandID   *string    `json:"commandID,omitempty"`
	Finalized   *bool      `json:"finalized,omitempty"`
	FromAddress *Address   `json:"fromAddress,omitempty"`
	Timestamp   *time.Time `json:"timestamp,omitempty"`
	TxID        *string    `json:"txID,omitempty"`
}

// MessageContext defines model for MessageContext.
type MessageContext map[string]string

// MessageExecutedEvent defines model for MessageExecutedEvent.
type MessageExecutedEvent struct {
	Cost        Cost                          `json:"cost"`
	EventID     string                        `json:"eventID"`
	MessageID   string                        `json:"messageID"`
	Meta        *MessageExecutedEventMetadata `json:"meta,omitempty"`
	SourceChain string                        `json:"sourceChain"`
	// Deprecated:
	Status MessageExecutionStatus `json:"status"`
}

// MessageExecutedEventMetadata defines model for MessageExecutedEventMetadata.
type MessageExecutedEventMetadata struct {
	ChildMessageIDs *[]string  `json:"childMessageIDs,omitempty"`
	CommandID       *string    `json:"commandID,omitempty"`
	Finalized       *bool      `json:"finalized,omitempty"`
	FromAddress     *Address   `json:"fromAddress,omitempty"`
	RevertReason    *string    `json:"revertReason,omitempty"`
	Timestamp       *time.Time `json:"timestamp,omitempty"`
	TxID            *string    `json:"txID,omitempty"`
}

// MessageExecutedEventV2 defines model for MessageExecutedEventV2.
type MessageExecutedEventV2 struct {
	Cost         Cost                          `json:"cost"`
	CrossChainID CrossChainID                  `json:"crossChainID"`
	EventID      string                        `json:"eventID"`
	Meta         *MessageExecutedEventMetadata `json:"meta,omitempty"`
}

// MessageExecutionStatus defines model for MessageExecutionStatus.
type MessageExecutionStatus string

// PublishEventAcceptedResult defines model for PublishEventAcceptedResult.
type PublishEventAcceptedResult struct {
	Index  int                `json:"index"`
	Status PublishEventStatus `json:"status"`
}

// PublishEventErrorResult defines model for PublishEventErrorResult.
type PublishEventErrorResult struct {
	Error     string             `json:"error"`
	Index     int                `json:"index"`
	Retriable bool               `json:"retriable"`
	Status    PublishEventStatus `json:"status"`
}

// PublishEventResultItem defines model for PublishEventResultItem.
type PublishEventResultItem struct {
	union json.RawMessage
}

// PublishEventResultItemBase defines model for PublishEventResultItemBase.
type PublishEventResultItemBase struct {
	Index  int                `json:"index"`
	Status PublishEventStatus `json:"status"`
}

// PublishEventStatus defines model for PublishEventStatus.
type PublishEventStatus string

// PublishEventsRequest defines model for PublishEventsRequest.
type PublishEventsRequest struct {
	Events []Event `json:"events"`
}

// PublishEventsResult defines model for PublishEventsResult.
type PublishEventsResult struct {
	Results []PublishEventResultItem `json:"results"`
}

// QuorumReachedEvent defines model for QuorumReachedEvent.
type QuorumReachedEvent struct {
	Content json.RawMessage    `json:"content"`
	Status  VerificationStatus `json:"status"`
}

// ReactToExpiredSigningSessionTask defines model for ReactToExpiredSigningSessionTask.
type ReactToExpiredSigningSessionTask struct {
	BroadcastID            BroadcastID `json:"broadcastID"`
	InvokedContractAddress Address     `json:"invokedContractAddress"`
	RequestPayload         WasmRequest `json:"requestPayload"`
	SessionID              uint64      `json:"sessionID"`
}

// ReactToRetriablePollTask defines model for ReactToRetriablePollTask.
type ReactToRetriablePollTask struct {
	BroadcastID            BroadcastID          `json:"broadcastID"`
	InvokedContractAddress Address              `json:"invokedContractAddress"`
	PollID                 uint64               `json:"pollID"`
	QuorumReachedEvents    []QuorumReachedEvent `json:"quorumReachedEvents"`
	RequestPayload         WasmRequest          `json:"requestPayload"`
}

// ReactToWasmEventTask defines model for ReactToWasmEventTask.
type ReactToWasmEventTask struct {
	Event  WasmEvent `json:"event"`
	Height int64     `json:"height"`
}

// RefundTask defines model for RefundTask.
type RefundTask struct {
	Message                Message       `json:"message"`
	RefundRecipientAddress Address       `json:"refundRecipientAddress"`
	RemainingGasBalance    UnsignedToken `json:"remainingGasBalance"`
}

// SignersRotatedEvent defines model for SignersRotatedEvent.
type SignersRotatedEvent struct {
	EventID   string                       `json:"eventID"`
	MessageID string                       `json:"messageID"`
	Meta      *SignersRotatedEventMetadata `json:"meta,omitempty"`
}

// SignersRotatedEventMetadata defines model for SignersRotatedEventMetadata.
type SignersRotatedEventMetadata struct {
	Epoch       *int64     `json:"epoch,omitempty"`
	Finalized   *bool      `json:"finalized,omitempty"`
	FromAddress *Address   `json:"fromAddress,omitempty"`
	SignersHash *[]byte    `json:"signersHash,omitempty"`
	Timestamp   *time.Time `json:"timestamp,omitempty"`
	TxID        *string    `json:"txID,omitempty"`
}

// SourceChainTaskMetadata Metadata attached to REFUND and VERIFY tasks. It carries values passed in the associated CALL event (if any) back to the source chain.
type SourceChainTaskMetadata struct {
	SourceContext *MessageContext `json:"sourceContext,omitempty"`
}

// StorePayloadResult defines model for StorePayloadResult.
type StorePayloadResult struct {
	Keccak256 Keccak256Hash `json:"keccak256"`
}

// Task defines model for Task.
type Task struct {
	union json.RawMessage
}

// TaskItem defines model for TaskItem.
type TaskItem struct {
	Chain     string        `json:"chain"`
	ID        TaskItemID    `json:"id"`
	Meta      *TaskMetadata `json:"meta,omitempty"`
	Task      Task          `json:"task"`
	Timestamp time.Time     `json:"timestamp"`
	Type      TaskType      `json:"type"`
}

// TaskItemID defines model for TaskItemID.
type TaskItemID = uuid.UUID

// TaskMetadata defines model for TaskMetadata.
type TaskMetadata struct {
	ScopedMessages *[]CrossChainID `json:"scopedMessages,omitempty"`
	SourceContext  *MessageContext `json:"sourceContext,omitempty"`
}

// TaskType defines model for TaskType.
type TaskType string

// Token defines model for Token.
type Token struct {
	Amount  BigInt  `json:"amount"`
	TokenID *string `json:"tokenID,omitempty"`
}

// TokenManagerType defines model for TokenManagerType.
type TokenManagerType string

// UnsignedBigInt defines model for UnsignedBigInt.
type UnsignedBigInt = string

// UnsignedToken defines model for UnsignedToken.
type UnsignedToken struct {
	Amount  UnsignedBigInt `json:"amount"`
	TokenID *string        `json:"tokenID,omitempty"`
}

// VerificationStatus defines model for VerificationStatus.
type VerificationStatus string

// VerifyTask defines model for VerifyTask.
type VerifyTask struct {
	DestinationChain string  `json:"destinationChain"`
	Message          Message `json:"message"`
	Payload          []byte  `json:"payload"`
}

// WasmEvent defines model for WasmEvent.
type WasmEvent struct {
	Attributes []WasmEventAttribute `json:"attributes"`
	Type       string               `json:"type"`
}

// WasmEventAttribute defines model for WasmEventAttribute.
type WasmEventAttribute struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// WasmRequest defines model for WasmRequest.
type WasmRequest struct {
	union json.RawMessage
}

// WasmRequestWithObjectBody defines model for WasmRequestWithObjectBody.
type WasmRequestWithObjectBody map[string]interface{}

// WasmRequestWithStringBody defines model for WasmRequestWithStringBody.
type WasmRequestWithStringBody = string

// After defines model for after.
type After = uuid.UUID

// Chain defines model for chain.
type Chain = string

// Limit defines model for limit.
type Limit = int

// WasmContractAddress defines model for wasmContractAddress.
type WasmContractAddress = string

// GetTasksParams defines parameters for GetTasks.
type GetTasksParams struct {
	After *After `form:"after,omitempty" json:"after,omitempty"`
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// PublishEventsJSONRequestBody defines body for PublishEvents for application/json ContentType.
type PublishEventsJSONRequestBody = PublishEventsRequest

// BroadcastMsgExecuteContractJSONRequestBody defines body for BroadcastMsgExecuteContract for application/json ContentType.
type BroadcastMsgExecuteContractJSONRequestBody = WasmRequest

// QueryContractStateJSONRequestBody defines body for QueryContractState for application/json ContentType.
type QueryContractStateJSONRequestBody = WasmRequest

// AsUnsignedToken returns the union data inside the Cost as a UnsignedToken
func (t Cost) AsUnsignedToken() (UnsignedToken, error) {
	var body UnsignedToken
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnsignedToken overwrites any union data inside the Cost as the provided UnsignedToken
func (t *Cost) FromUnsignedToken(v UnsignedToken) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnsignedToken performs a merge with any union data inside the Cost, using the provided UnsignedToken
func (t *Cost) MergeUnsignedToken(v UnsignedToken) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFees returns the union data inside the Cost as a Fees
func (t Cost) AsFees() (Fees, error) {
	var body Fees
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFees overwrites any union data inside the Cost as the provided Fees
func (t *Cost) FromFees(v Fees) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFees performs a merge with any union data inside the Cost, using the provided Fees
func (t *Cost) MergeFees(v Fees) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Cost) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Cost) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGasCreditEvent returns the union data inside the Event as a GasCreditEvent
func (t Event) AsGasCreditEvent() (GasCreditEvent, error) {
	var body GasCreditEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGasCreditEvent overwrites any union data inside the Event as the provided GasCreditEvent
func (t *Event) FromGasCreditEvent(v GasCreditEvent) error {
	t.Type = "GAS_CREDIT"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGasCreditEvent performs a merge with any union data inside the Event, using the provided GasCreditEvent
func (t *Event) MergeGasCreditEvent(v GasCreditEvent) error {
	t.Type = "GAS_CREDIT"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGasRefundedEvent returns the union data inside the Event as a GasRefundedEvent
func (t Event) AsGasRefundedEvent() (GasRefundedEvent, error) {
	var body GasRefundedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGasRefundedEvent overwrites any union data inside the Event as the provided GasRefundedEvent
func (t *Event) FromGasRefundedEvent(v GasRefundedEvent) error {
	t.Type = "GAS_REFUNDED"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGasRefundedEvent performs a merge with any union data inside the Event, using the provided GasRefundedEvent
func (t *Event) MergeGasRefundedEvent(v GasRefundedEvent) error {
	t.Type = "GAS_REFUNDED"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCallEvent returns the union data inside the Event as a CallEvent
func (t Event) AsCallEvent() (CallEvent, error) {
	var body CallEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCallEvent overwrites any union data inside the Event as the provided CallEvent
func (t *Event) FromCallEvent(v CallEvent) error {
	t.Type = "CALL"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCallEvent performs a merge with any union data inside the Event, using the provided CallEvent
func (t *Event) MergeCallEvent(v CallEvent) error {
	t.Type = "CALL"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageApprovedEvent returns the union data inside the Event as a MessageApprovedEvent
func (t Event) AsMessageApprovedEvent() (MessageApprovedEvent, error) {
	var body MessageApprovedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageApprovedEvent overwrites any union data inside the Event as the provided MessageApprovedEvent
func (t *Event) FromMessageApprovedEvent(v MessageApprovedEvent) error {
	t.Type = "MESSAGE_APPROVED"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageApprovedEvent performs a merge with any union data inside the Event, using the provided MessageApprovedEvent
func (t *Event) MergeMessageApprovedEvent(v MessageApprovedEvent) error {
	t.Type = "MESSAGE_APPROVED"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageExecutedEvent returns the union data inside the Event as a MessageExecutedEvent
func (t Event) AsMessageExecutedEvent() (MessageExecutedEvent, error) {
	var body MessageExecutedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageExecutedEvent overwrites any union data inside the Event as the provided MessageExecutedEvent
func (t *Event) FromMessageExecutedEvent(v MessageExecutedEvent) error {
	t.Type = "MESSAGE_EXECUTED"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageExecutedEvent performs a merge with any union data inside the Event, using the provided MessageExecutedEvent
func (t *Event) MergeMessageExecutedEvent(v MessageExecutedEvent) error {
	t.Type = "MESSAGE_EXECUTED"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageExecutedEventV2 returns the union data inside the Event as a MessageExecutedEventV2
func (t Event) AsMessageExecutedEventV2() (MessageExecutedEventV2, error) {
	var body MessageExecutedEventV2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageExecutedEventV2 overwrites any union data inside the Event as the provided MessageExecutedEventV2
func (t *Event) FromMessageExecutedEventV2(v MessageExecutedEventV2) error {
	t.Type = "MESSAGE_EXECUTED/V2"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageExecutedEventV2 performs a merge with any union data inside the Event, using the provided MessageExecutedEventV2
func (t *Event) MergeMessageExecutedEventV2(v MessageExecutedEventV2) error {
	t.Type = "MESSAGE_EXECUTED/V2"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCannotExecuteMessageEvent returns the union data inside the Event as a CannotExecuteMessageEvent
func (t Event) AsCannotExecuteMessageEvent() (CannotExecuteMessageEvent, error) {
	var body CannotExecuteMessageEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCannotExecuteMessageEvent overwrites any union data inside the Event as the provided CannotExecuteMessageEvent
func (t *Event) FromCannotExecuteMessageEvent(v CannotExecuteMessageEvent) error {
	t.Type = "CANNOT_EXECUTE_MESSAGE"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCannotExecuteMessageEvent performs a merge with any union data inside the Event, using the provided CannotExecuteMessageEvent
func (t *Event) MergeCannotExecuteMessageEvent(v CannotExecuteMessageEvent) error {
	t.Type = "CANNOT_EXECUTE_MESSAGE"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCannotExecuteMessageEventV2 returns the union data inside the Event as a CannotExecuteMessageEventV2
func (t Event) AsCannotExecuteMessageEventV2() (CannotExecuteMessageEventV2, error) {
	var body CannotExecuteMessageEventV2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCannotExecuteMessageEventV2 overwrites any union data inside the Event as the provided CannotExecuteMessageEventV2
func (t *Event) FromCannotExecuteMessageEventV2(v CannotExecuteMessageEventV2) error {
	t.Type = "CANNOT_EXECUTE_MESSAGE/V2"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCannotExecuteMessageEventV2 performs a merge with any union data inside the Event, using the provided CannotExecuteMessageEventV2
func (t *Event) MergeCannotExecuteMessageEventV2(v CannotExecuteMessageEventV2) error {
	t.Type = "CANNOT_EXECUTE_MESSAGE/V2"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCannotRouteMessageEvent returns the union data inside the Event as a CannotRouteMessageEvent
func (t Event) AsCannotRouteMessageEvent() (CannotRouteMessageEvent, error) {
	var body CannotRouteMessageEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCannotRouteMessageEvent overwrites any union data inside the Event as the provided CannotRouteMessageEvent
func (t *Event) FromCannotRouteMessageEvent(v CannotRouteMessageEvent) error {
	t.Type = "CANNOT_ROUTE_MESSAGE"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCannotRouteMessageEvent performs a merge with any union data inside the Event, using the provided CannotRouteMessageEvent
func (t *Event) MergeCannotRouteMessageEvent(v CannotRouteMessageEvent) error {
	t.Type = "CANNOT_ROUTE_MESSAGE"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCannotExecuteTaskEvent returns the union data inside the Event as a CannotExecuteTaskEvent
func (t Event) AsCannotExecuteTaskEvent() (CannotExecuteTaskEvent, error) {
	var body CannotExecuteTaskEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCannotExecuteTaskEvent overwrites any union data inside the Event as the provided CannotExecuteTaskEvent
func (t *Event) FromCannotExecuteTaskEvent(v CannotExecuteTaskEvent) error {
	t.Type = "CANNOT_EXECUTE_TASK"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCannotExecuteTaskEvent performs a merge with any union data inside the Event, using the provided CannotExecuteTaskEvent
func (t *Event) MergeCannotExecuteTaskEvent(v CannotExecuteTaskEvent) error {
	t.Type = "CANNOT_EXECUTE_TASK"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSignersRotatedEvent returns the union data inside the Event as a SignersRotatedEvent
func (t Event) AsSignersRotatedEvent() (SignersRotatedEvent, error) {
	var body SignersRotatedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSignersRotatedEvent overwrites any union data inside the Event as the provided SignersRotatedEvent
func (t *Event) FromSignersRotatedEvent(v SignersRotatedEvent) error {
	t.Type = "SIGNERS_ROTATED"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSignersRotatedEvent performs a merge with any union data inside the Event, using the provided SignersRotatedEvent
func (t *Event) MergeSignersRotatedEvent(v SignersRotatedEvent) error {
	t.Type = "SIGNERS_ROTATED"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsITSLinkTokenStartedEvent returns the union data inside the Event as a ITSLinkTokenStartedEvent
func (t Event) AsITSLinkTokenStartedEvent() (ITSLinkTokenStartedEvent, error) {
	var body ITSLinkTokenStartedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromITSLinkTokenStartedEvent overwrites any union data inside the Event as the provided ITSLinkTokenStartedEvent
func (t *Event) FromITSLinkTokenStartedEvent(v ITSLinkTokenStartedEvent) error {
	t.Type = "ITS/LINK_TOKEN_STARTED"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeITSLinkTokenStartedEvent performs a merge with any union data inside the Event, using the provided ITSLinkTokenStartedEvent
func (t *Event) MergeITSLinkTokenStartedEvent(v ITSLinkTokenStartedEvent) error {
	t.Type = "ITS/LINK_TOKEN_STARTED"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsITSTokenMetadataRegisteredEvent returns the union data inside the Event as a ITSTokenMetadataRegisteredEvent
func (t Event) AsITSTokenMetadataRegisteredEvent() (ITSTokenMetadataRegisteredEvent, error) {
	var body ITSTokenMetadataRegisteredEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromITSTokenMetadataRegisteredEvent overwrites any union data inside the Event as the provided ITSTokenMetadataRegisteredEvent
func (t *Event) FromITSTokenMetadataRegisteredEvent(v ITSTokenMetadataRegisteredEvent) error {
	t.Type = "ITS/TOKEN_METADATA_REGISTERED"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeITSTokenMetadataRegisteredEvent performs a merge with any union data inside the Event, using the provided ITSTokenMetadataRegisteredEvent
func (t *Event) MergeITSTokenMetadataRegisteredEvent(v ITSTokenMetadataRegisteredEvent) error {
	t.Type = "ITS/TOKEN_METADATA_REGISTERED"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsITSInterchainTokenDeploymentStartedEvent returns the union data inside the Event as a ITSInterchainTokenDeploymentStartedEvent
func (t Event) AsITSInterchainTokenDeploymentStartedEvent() (ITSInterchainTokenDeploymentStartedEvent, error) {
	var body ITSInterchainTokenDeploymentStartedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromITSInterchainTokenDeploymentStartedEvent overwrites any union data inside the Event as the provided ITSInterchainTokenDeploymentStartedEvent
func (t *Event) FromITSInterchainTokenDeploymentStartedEvent(v ITSInterchainTokenDeploymentStartedEvent) error {
	t.Type = "ITS/INTERCHAIN_TOKEN_DEPLOYMENT_STARTED"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeITSInterchainTokenDeploymentStartedEvent performs a merge with any union data inside the Event, using the provided ITSInterchainTokenDeploymentStartedEvent
func (t *Event) MergeITSInterchainTokenDeploymentStartedEvent(v ITSInterchainTokenDeploymentStartedEvent) error {
	t.Type = "ITS/INTERCHAIN_TOKEN_DEPLOYMENT_STARTED"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsITSInterchainTransferEvent returns the union data inside the Event as a ITSInterchainTransferEvent
func (t Event) AsITSInterchainTransferEvent() (ITSInterchainTransferEvent, error) {
	var body ITSInterchainTransferEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromITSInterchainTransferEvent overwrites any union data inside the Event as the provided ITSInterchainTransferEvent
func (t *Event) FromITSInterchainTransferEvent(v ITSInterchainTransferEvent) error {
	t.Type = "ITS/INTERCHAIN_TRANSFER"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeITSInterchainTransferEvent performs a merge with any union data inside the Event, using the provided ITSInterchainTransferEvent
func (t *Event) MergeITSInterchainTransferEvent(v ITSInterchainTransferEvent) error {
	t.Type = "ITS/INTERCHAIN_TRANSFER"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAppInterchainTransferSentEvent returns the union data inside the Event as a AppInterchainTransferSentEvent
func (t Event) AsAppInterchainTransferSentEvent() (AppInterchainTransferSentEvent, error) {
	var body AppInterchainTransferSentEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAppInterchainTransferSentEvent overwrites any union data inside the Event as the provided AppInterchainTransferSentEvent
func (t *Event) FromAppInterchainTransferSentEvent(v AppInterchainTransferSentEvent) error {
	t.Type = "APP/INTERCHAIN_TRANSFER_SENT"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAppInterchainTransferSentEvent performs a merge with any union data inside the Event, using the provided AppInterchainTransferSentEvent
func (t *Event) MergeAppInterchainTransferSentEvent(v AppInterchainTransferSentEvent) error {
	t.Type = "APP/INTERCHAIN_TRANSFER_SENT"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAppInterchainTransferReceivedEvent returns the union data inside the Event as a AppInterchainTransferReceivedEvent
func (t Event) AsAppInterchainTransferReceivedEvent() (AppInterchainTransferReceivedEvent, error) {
	var body AppInterchainTransferReceivedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAppInterchainTransferReceivedEvent overwrites any union data inside the Event as the provided AppInterchainTransferReceivedEvent
func (t *Event) FromAppInterchainTransferReceivedEvent(v AppInterchainTransferReceivedEvent) error {
	t.Type = "APP/INTERCHAIN_TRANSFER_RECEIVED"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAppInterchainTransferReceivedEvent performs a merge with any union data inside the Event, using the provided AppInterchainTransferReceivedEvent
func (t *Event) MergeAppInterchainTransferReceivedEvent(v AppInterchainTransferReceivedEvent) error {
	t.Type = "APP/INTERCHAIN_TRANSFER_RECEIVED"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Event) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Event) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "APP/INTERCHAIN_TRANSFER_RECEIVED":
		return t.AsAppInterchainTransferReceivedEvent()
	case "APP/INTERCHAIN_TRANSFER_SENT":
		return t.AsAppInterchainTransferSentEvent()
	case "CALL":
		return t.AsCallEvent()
	case "CANNOT_EXECUTE_MESSAGE":
		return t.AsCannotExecuteMessageEvent()
	case "CANNOT_EXECUTE_MESSAGE/V2":
		return t.AsCannotExecuteMessageEventV2()
	case "CANNOT_EXECUTE_TASK":
		return t.AsCannotExecuteTaskEvent()
	case "CANNOT_ROUTE_MESSAGE":
		return t.AsCannotRouteMessageEvent()
	case "GAS_CREDIT":
		return t.AsGasCreditEvent()
	case "GAS_REFUNDED":
		return t.AsGasRefundedEvent()
	case "ITS/INTERCHAIN_TOKEN_DEPLOYMENT_STARTED":
		return t.AsITSInterchainTokenDeploymentStartedEvent()
	case "ITS/INTERCHAIN_TRANSFER":
		return t.AsITSInterchainTransferEvent()
	case "ITS/LINK_TOKEN_STARTED":
		return t.AsITSLinkTokenStartedEvent()
	case "ITS/TOKEN_METADATA_REGISTERED":
		return t.AsITSTokenMetadataRegisteredEvent()
	case "MESSAGE_APPROVED":
		return t.AsMessageApprovedEvent()
	case "MESSAGE_EXECUTED":
		return t.AsMessageExecutedEvent()
	case "MESSAGE_EXECUTED/V2":
		return t.AsMessageExecutedEventV2()
	case "SIGNERS_ROTATED":
		return t.AsSignersRotatedEvent()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Event) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["type"], err = json.Marshal(t.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *Event) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// AsPublishEventAcceptedResult returns the union data inside the PublishEventResultItem as a PublishEventAcceptedResult
func (t PublishEventResultItem) AsPublishEventAcceptedResult() (PublishEventAcceptedResult, error) {
	var body PublishEventAcceptedResult
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublishEventAcceptedResult overwrites any union data inside the PublishEventResultItem as the provided PublishEventAcceptedResult
func (t *PublishEventResultItem) FromPublishEventAcceptedResult(v PublishEventAcceptedResult) error {
	v.Status = "ACCEPTED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublishEventAcceptedResult performs a merge with any union data inside the PublishEventResultItem, using the provided PublishEventAcceptedResult
func (t *PublishEventResultItem) MergePublishEventAcceptedResult(v PublishEventAcceptedResult) error {
	v.Status = "ACCEPTED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublishEventErrorResult returns the union data inside the PublishEventResultItem as a PublishEventErrorResult
func (t PublishEventResultItem) AsPublishEventErrorResult() (PublishEventErrorResult, error) {
	var body PublishEventErrorResult
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublishEventErrorResult overwrites any union data inside the PublishEventResultItem as the provided PublishEventErrorResult
func (t *PublishEventResultItem) FromPublishEventErrorResult(v PublishEventErrorResult) error {
	v.Status = "ERROR"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublishEventErrorResult performs a merge with any union data inside the PublishEventResultItem, using the provided PublishEventErrorResult
func (t *PublishEventResultItem) MergePublishEventErrorResult(v PublishEventErrorResult) error {
	v.Status = "ERROR"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PublishEventResultItem) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"status"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PublishEventResultItem) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "ACCEPTED":
		return t.AsPublishEventAcceptedResult()
	case "ERROR":
		return t.AsPublishEventErrorResult()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PublishEventResultItem) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PublishEventResultItem) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsConstructProofTask returns the union data inside the Task as a ConstructProofTask
func (t Task) AsConstructProofTask() (ConstructProofTask, error) {
	var body ConstructProofTask
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConstructProofTask overwrites any union data inside the Task as the provided ConstructProofTask
func (t *Task) FromConstructProofTask(v ConstructProofTask) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConstructProofTask performs a merge with any union data inside the Task, using the provided ConstructProofTask
func (t *Task) MergeConstructProofTask(v ConstructProofTask) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExecuteTask returns the union data inside the Task as a ExecuteTask
func (t Task) AsExecuteTask() (ExecuteTask, error) {
	var body ExecuteTask
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExecuteTask overwrites any union data inside the Task as the provided ExecuteTask
func (t *Task) FromExecuteTask(v ExecuteTask) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExecuteTask performs a merge with any union data inside the Task, using the provided ExecuteTask
func (t *Task) MergeExecuteTask(v ExecuteTask) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGatewayTransactionTask returns the union data inside the Task as a GatewayTransactionTask
func (t Task) AsGatewayTransactionTask() (GatewayTransactionTask, error) {
	var body GatewayTransactionTask
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGatewayTransactionTask overwrites any union data inside the Task as the provided GatewayTransactionTask
func (t *Task) FromGatewayTransactionTask(v GatewayTransactionTask) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGatewayTransactionTask performs a merge with any union data inside the Task, using the provided GatewayTransactionTask
func (t *Task) MergeGatewayTransactionTask(v GatewayTransactionTask) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsReactToWasmEventTask returns the union data inside the Task as a ReactToWasmEventTask
func (t Task) AsReactToWasmEventTask() (ReactToWasmEventTask, error) {
	var body ReactToWasmEventTask
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReactToWasmEventTask overwrites any union data inside the Task as the provided ReactToWasmEventTask
func (t *Task) FromReactToWasmEventTask(v ReactToWasmEventTask) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReactToWasmEventTask performs a merge with any union data inside the Task, using the provided ReactToWasmEventTask
func (t *Task) MergeReactToWasmEventTask(v ReactToWasmEventTask) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRefundTask returns the union data inside the Task as a RefundTask
func (t Task) AsRefundTask() (RefundTask, error) {
	var body RefundTask
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRefundTask overwrites any union data inside the Task as the provided RefundTask
func (t *Task) FromRefundTask(v RefundTask) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRefundTask performs a merge with any union data inside the Task, using the provided RefundTask
func (t *Task) MergeRefundTask(v RefundTask) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsReactToExpiredSigningSessionTask returns the union data inside the Task as a ReactToExpiredSigningSessionTask
func (t Task) AsReactToExpiredSigningSessionTask() (ReactToExpiredSigningSessionTask, error) {
	var body ReactToExpiredSigningSessionTask
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReactToExpiredSigningSessionTask overwrites any union data inside the Task as the provided ReactToExpiredSigningSessionTask
func (t *Task) FromReactToExpiredSigningSessionTask(v ReactToExpiredSigningSessionTask) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReactToExpiredSigningSessionTask performs a merge with any union data inside the Task, using the provided ReactToExpiredSigningSessionTask
func (t *Task) MergeReactToExpiredSigningSessionTask(v ReactToExpiredSigningSessionTask) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsReactToRetriablePollTask returns the union data inside the Task as a ReactToRetriablePollTask
func (t Task) AsReactToRetriablePollTask() (ReactToRetriablePollTask, error) {
	var body ReactToRetriablePollTask
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReactToRetriablePollTask overwrites any union data inside the Task as the provided ReactToRetriablePollTask
func (t *Task) FromReactToRetriablePollTask(v ReactToRetriablePollTask) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReactToRetriablePollTask performs a merge with any union data inside the Task, using the provided ReactToRetriablePollTask
func (t *Task) MergeReactToRetriablePollTask(v ReactToRetriablePollTask) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVerifyTask returns the union data inside the Task as a VerifyTask
func (t Task) AsVerifyTask() (VerifyTask, error) {
	var body VerifyTask
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVerifyTask overwrites any union data inside the Task as the provided VerifyTask
func (t *Task) FromVerifyTask(v VerifyTask) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVerifyTask performs a merge with any union data inside the Task, using the provided VerifyTask
func (t *Task) MergeVerifyTask(v VerifyTask) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Task) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Task) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsWasmRequestWithObjectBody returns the union data inside the WasmRequest as a WasmRequestWithObjectBody
func (t WasmRequest) AsWasmRequestWithObjectBody() (WasmRequestWithObjectBody, error) {
	var body WasmRequestWithObjectBody
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWasmRequestWithObjectBody overwrites any union data inside the WasmRequest as the provided WasmRequestWithObjectBody
func (t *WasmRequest) FromWasmRequestWithObjectBody(v WasmRequestWithObjectBody) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWasmRequestWithObjectBody performs a merge with any union data inside the WasmRequest, using the provided WasmRequestWithObjectBody
func (t *WasmRequest) MergeWasmRequestWithObjectBody(v WasmRequestWithObjectBody) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWasmRequestWithStringBody returns the union data inside the WasmRequest as a WasmRequestWithStringBody
func (t WasmRequest) AsWasmRequestWithStringBody() (WasmRequestWithStringBody, error) {
	var body WasmRequestWithStringBody
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWasmRequestWithStringBody overwrites any union data inside the WasmRequest as the provided WasmRequestWithStringBody
func (t *WasmRequest) FromWasmRequestWithStringBody(v WasmRequestWithStringBody) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWasmRequestWithStringBody performs a merge with any union data inside the WasmRequest, using the provided WasmRequestWithStringBody
func (t *WasmRequest) MergeWasmRequestWithStringBody(v WasmRequestWithStringBody) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t WasmRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WasmRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
