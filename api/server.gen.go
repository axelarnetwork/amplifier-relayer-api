// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Publish on-chain events
	// (POST /chains/{chain}/events)
	PublishEvents(c *gin.Context, chain Chain)
	// Poll transaction to be executed on chain
	// (GET /chains/{chain}/tasks)
	GetTasks(c *gin.Context, chain Chain, params GetTasksParams)
	// Retrieve a transaction to be executed on-chain by id
	// (GET /chains/{chain}/tasks/{taskItemID})
	GetTask(c *gin.Context, chain Chain, taskItemID TaskItemID)
	// Broadcast arbitrary MsgExecuteContract transaction
	// (POST /contracts/{wasmContractAddress}/broadcasts)
	BroadcastMsgExecuteContract(c *gin.Context, wasmContractAddress WasmContractAddress)
	// Get broadcast status
	// (GET /contracts/{wasmContractAddress}/broadcasts/{broadcastID})
	GetMsgExecuteContractBroadcastStatus(c *gin.Context, wasmContractAddress WasmContractAddress, broadcastID BroadcastID)
	// Query arbitrary contract state
	// (POST /contracts/{wasmContractAddress}/queries)
	QueryContractState(c *gin.Context, wasmContractAddress WasmContractAddress)
	// Health check
	// (GET /health)
	HealthCheck(c *gin.Context)
	// Temporarily store a large payload against its hash to bypass size restrictions on some chains.
	// (POST /payloads)
	StorePayload(c *gin.Context)
	// Retrieve a stored payload by its hash
	// (GET /payloads/{hash})
	GetPayload(c *gin.Context, hash Keccak256Hash)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PublishEvents operation middleware
func (siw *ServerInterfaceWrapper) PublishEvents(c *gin.Context) {

	var err error

	// ------------- Path parameter "chain" -------------
	var chain Chain

	err = runtime.BindStyledParameterWithOptions("simple", "chain", c.Param("chain"), &chain, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter chain: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PublishEvents(c, chain)
}

// GetTasks operation middleware
func (siw *ServerInterfaceWrapper) GetTasks(c *gin.Context) {

	var err error

	// ------------- Path parameter "chain" -------------
	var chain Chain

	err = runtime.BindStyledParameterWithOptions("simple", "chain", c.Param("chain"), &chain, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter chain: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTasksParams

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", c.Request.URL.Query(), &params.After)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter after: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTasks(c, chain, params)
}

// GetTask operation middleware
func (siw *ServerInterfaceWrapper) GetTask(c *gin.Context) {

	var err error

	// ------------- Path parameter "chain" -------------
	var chain Chain

	err = runtime.BindStyledParameterWithOptions("simple", "chain", c.Param("chain"), &chain, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter chain: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "taskItemID" -------------
	var taskItemID TaskItemID

	err = runtime.BindStyledParameterWithOptions("simple", "taskItemID", c.Param("taskItemID"), &taskItemID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter taskItemID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTask(c, chain, taskItemID)
}

// BroadcastMsgExecuteContract operation middleware
func (siw *ServerInterfaceWrapper) BroadcastMsgExecuteContract(c *gin.Context) {

	var err error

	// ------------- Path parameter "wasmContractAddress" -------------
	var wasmContractAddress WasmContractAddress

	err = runtime.BindStyledParameterWithOptions("simple", "wasmContractAddress", c.Param("wasmContractAddress"), &wasmContractAddress, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter wasmContractAddress: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BroadcastMsgExecuteContract(c, wasmContractAddress)
}

// GetMsgExecuteContractBroadcastStatus operation middleware
func (siw *ServerInterfaceWrapper) GetMsgExecuteContractBroadcastStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "wasmContractAddress" -------------
	var wasmContractAddress WasmContractAddress

	err = runtime.BindStyledParameterWithOptions("simple", "wasmContractAddress", c.Param("wasmContractAddress"), &wasmContractAddress, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter wasmContractAddress: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "broadcastID" -------------
	var broadcastID BroadcastID

	err = runtime.BindStyledParameterWithOptions("simple", "broadcastID", c.Param("broadcastID"), &broadcastID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter broadcastID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMsgExecuteContractBroadcastStatus(c, wasmContractAddress, broadcastID)
}

// QueryContractState operation middleware
func (siw *ServerInterfaceWrapper) QueryContractState(c *gin.Context) {

	var err error

	// ------------- Path parameter "wasmContractAddress" -------------
	var wasmContractAddress WasmContractAddress

	err = runtime.BindStyledParameterWithOptions("simple", "wasmContractAddress", c.Param("wasmContractAddress"), &wasmContractAddress, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter wasmContractAddress: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QueryContractState(c, wasmContractAddress)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheck(c)
}

// StorePayload operation middleware
func (siw *ServerInterfaceWrapper) StorePayload(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StorePayload(c)
}

// GetPayload operation middleware
func (siw *ServerInterfaceWrapper) GetPayload(c *gin.Context) {

	var err error

	// ------------- Path parameter "hash" -------------
	var hash Keccak256Hash

	err = runtime.BindStyledParameterWithOptions("simple", "hash", c.Param("hash"), &hash, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hash: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPayload(c, hash)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/chains/:chain/events", wrapper.PublishEvents)
	router.GET(options.BaseURL+"/chains/:chain/tasks", wrapper.GetTasks)
	router.GET(options.BaseURL+"/chains/:chain/tasks/:taskItemID", wrapper.GetTask)
	router.POST(options.BaseURL+"/contracts/:wasmContractAddress/broadcasts", wrapper.BroadcastMsgExecuteContract)
	router.GET(options.BaseURL+"/contracts/:wasmContractAddress/broadcasts/:broadcastID", wrapper.GetMsgExecuteContractBroadcastStatus)
	router.POST(options.BaseURL+"/contracts/:wasmContractAddress/queries", wrapper.QueryContractState)
	router.GET(options.BaseURL+"/health", wrapper.HealthCheck)
	router.POST(options.BaseURL+"/payloads", wrapper.StorePayload)
	router.GET(options.BaseURL+"/payloads/:hash", wrapper.GetPayload)
}
